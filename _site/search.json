[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Genuary Submissions",
    "section": "",
    "text": "January 1st - Perfect loop / Infinite loop / endless GIFs\n\n\n\n\n\n\n\n\n\nJan 1, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 2nd - Made in 10 Minutes\n\n\n\n\n\n\n\n\n\nJan 2, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 3rd - Glitch Art\n\n\n\n\n\n\n\n\n\nJan 3, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 4th - Intersections\n\n\n\n\n\n\n\n\n\nJan 4, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 5th - Debug View\n\n\n\n\n\n\n\n\n\nJan 5, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 6th - Steal Like an Artist\n\n\n\n\n\n\n\n\n\nJan 6, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 7th - Sample a color palette from your favorite movie/album cover\n\n\n\n\n\n\n\n\n\nJan 7, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 8th - Signed Distance Functions (Code Not Available)\n\n\n\n\n\n\n\n\n\nJan 8, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 9th - Plants\n\n\n\n\n\n\n\n\n\nJan 9, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 10th - Generative Music\n\n\n\n\n\n\n\n\n\nJan 10, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 11th - Suprematism\n\n\n\n\n\n\n\n\n\nJan 11, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 12th - Tessellation\n\n\n\n\n\n\n\n\n\nJan 12, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 13th - Something You’ve Always Wanted to Learn\n\n\n\n\n\n\n\n\n\nJan 13, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 14th - Aesemic\n\n\n\n\n\n\n\n\n\nJan 14, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 15th - Sine Waves\n\n\n\n\n\n\n\n\n\nJan 15, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 16th - Reflection of A Reflection (Code Not Available)\n\n\n\n\n\n\n\n\n\nJan 16, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 17th - A Grid Inside A Grid Inside A Grid\n\n\n\n\n\n\n\n\n\nJan 17, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 18th - A Grid Inside A Grid Inside A Grid\n\n\n\n\n\n\n\n\n\nJan 18, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 19th - Black and White\n\n\n\n\n\n\n\n\n\nJan 19, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 20th - Art Deco\n\n\n\n\n\n\n\n\n\nJan 20, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 21st - Persian Rug\n\n\n\n\n\n\n\n\n\nJan 21, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 22nd - Shadows\n\n\n\n\n\n\n\n\n\nJan 22, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 23rd - More Moiré\n\n\n\n\n\n\n\n\n\nJan 23, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 24th - Textile\n\n\n\n\n\n\n\n\n\nJan 24, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 25th - Yayoi Kusama (Code Not Available)\n\n\n\n\n\n\n\n\n\nJan 25, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 26th - My Kid Could Have Made That\n\n\n\n\n\n\n\n\n\nJan 26, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 27th - In the style of Hilma Af Klint\n\n\n\n\n\n\n\n\n\nJan 27, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 28th - Generative Poetry (Image Made with Canva)\n\n\n\n\n\n\n\n\n\nJan 28, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 29th - Maximailism\n\n\n\n\n\n\n\n\n\nJan 29, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 30th - Minimalism\n\n\n\n\n\n\n\n\n\nJan 30, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 31st - Remix one of Your Previous Works\n\n\n\n\n\n\n\n\n\nJan 31, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "submissions/day_1.html",
    "href": "submissions/day_1.html",
    "title": "January 1st - Perfect loop / Infinite loop / endless GIFs",
    "section": "",
    "text": "Show code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\n\nlibrary(dplyr) #For data wrangling/manipulation\nlibrary(purrr) #For list wrangling/manipulation/iterations\nlibrary(gganimate) #For gif creation\nlibrary(transformr) #For gif creation assistance\n\n#=============================================================================#\n#Data Set up-------------------------------------------------------------------\n#=============================================================================#\n\n#Angles for shapes#\ntheta <- seq(0,2*pi, length.out = 10000)\n\n#Base level of circles to be manipulated#\ncircles <- tibble(x = cos(theta) * seq(1,100, length.out = 100),\n                  y = sin(theta) * seq(1,100, length.out = 100))\n\n#Color palette to use#\ncolor_base <- c(\"#af3918\", \"#a21152\", \"#822b75\",\"#612884\", \"#154baf\",\n                \"#0b82b9\",\"#277e9d\",\"#488e35\",\"#e3a934\",\"#b2336a\")\n\n#Creating indices to create the pattern of which colors will be presented in a loop#            \nindices <- list(c(1:10),\n                c(2:10,1),\n                c(3:10,1:2),\n                c(4:10,1:3),\n                c(5:10,1:4),\n                c(6:10,1:5),\n                c(7:10,1:6),\n                c(8:10,1:7),\n                c(9:10,1:8),\n                c(10,1:9))\n\n\n#=============================================================================#\n#Final Data Compilation--------------------------------------------------------\n#=============================================================================#\n\ncolor_picks <- map2_df(indices,1:10, ~circles |>\n                        mutate(color = colorRampPalette(color_base[.x])(nrow(circles)),\n                               group = paste0(\"set_\",.y))\n                      )\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\n#!!!May take a while to build/render based on your PC stats!!!#\n\ncolor_picks %>%\n  ggplot(aes(x = x*y,\n             y = x, \n             group = group))+\n  theme_void()+\n  theme(plot.background = element_rect(fill = \"black\", \n                                       linewidth = 20, \n                                       color = \"white\"))+\n  geom_path(linewidth = sample(c(1:4), nrow(color_picks), replace = TRUE),\n             position = position_jitter(width = .1), \n            color = color_picks$color)+\n  coord_polar()+\n  transition_states(\n    group,\n    transition_length = 10,\n    state_length = .1\n  ) +\n  enter_fade() + \n  exit_fade() +\n  ease_aes('bounce-in-out')\n\n#Use -> anim_save(\"image destination and name here.gif\") to save output locally"
  },
  {
    "objectID": "submissions/day_01.html",
    "href": "submissions/day_01.html",
    "title": "January 1st - Perfect loop / Infinite loop / endless GIFs",
    "section": "",
    "text": "Show code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\n\nlibrary(dplyr) #For data wrangling/manipulation\nlibrary(purrr) #For list wrangling/manipulation/iterations\nlibrary(gganimate) #For gif creation\nlibrary(transformr) #For gif creation assistance\n\n#=============================================================================#\n#Data Set up-------------------------------------------------------------------\n#=============================================================================#\n\n#Angles for shapes#\ntheta <- seq(0,2*pi, length.out = 10000)\n\n#Base level of circles to be manipulated#\ncircles <- tibble(x = cos(theta) * seq(1,100, length.out = 100),\n                  y = sin(theta) * seq(1,100, length.out = 100))\n\n#Color palette to use#\ncolor_base <- c(\"#af3918\", \"#a21152\", \"#822b75\",\"#612884\", \"#154baf\",\n                \"#0b82b9\",\"#277e9d\",\"#488e35\",\"#e3a934\",\"#b2336a\")\n\n#Creating indices to create the pattern of which colors will be presented in a loop#            \nindices <- list(c(1:10),\n                c(2:10,1),\n                c(3:10,1:2),\n                c(4:10,1:3),\n                c(5:10,1:4),\n                c(6:10,1:5),\n                c(7:10,1:6),\n                c(8:10,1:7),\n                c(9:10,1:8),\n                c(10,1:9))\n\n\n#=============================================================================#\n#Final Data Compilation--------------------------------------------------------\n#=============================================================================#\n\ncolor_picks <- map2_df(indices,1:10, ~circles |>\n                        mutate(color = colorRampPalette(color_base[.x])(nrow(circles)),\n                               group = paste0(\"set_\",.y))\n                      )\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\n#!!!May take a while to build/render based on your PC stats!!!#\n\ncolor_picks %>%\n  ggplot(aes(x = x*y,\n             y = x, \n             group = group))+\n  theme_void()+\n  theme(plot.background = element_rect(fill = \"black\", \n                                       linewidth = 20, \n                                       color = \"white\"))+\n  geom_path(linewidth = sample(c(1:4), nrow(color_picks), replace = TRUE),\n             position = position_jitter(width = .1), \n            color = color_picks$color)+\n  coord_polar()+\n  transition_states(\n    group,\n    transition_length = 10,\n    state_length = .1\n  ) +\n  enter_fade() + \n  exit_fade() +\n  ease_aes('bounce-in-out')\n\n#Use -> anim_save(\"image destination and name here.gif\") to save output locally"
  },
  {
    "objectID": "submissions/day_02.html",
    "href": "submissions/day_02.html",
    "title": "January 2nd - Made in 10 Minutes",
    "section": "",
    "text": "Show code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\nlibrary(dplyr) #For data wrangling/manipulation\nlibrary(purrr) #For list wrangling/manipulation/iterations\nlibrary(ggplot2) #For plotting\n\n#=============================================================================#\n#Data Set-up-------------------------------------------------------------------\n#=============================================================================#\n\n#Angles in a circle#\ntheta <- seq(0,2*pi, length.out = 100)\n\n#Creating a basic unit circle#\nunit_circle <- tibble(x = cos(theta),\n                      y = sin(theta))\n\n#Picking out a color palette#\ncolor_pal <- c(\"#FFD39A\", \"#319DA0\", \"#781C68\", \"#FFF5E1\")\n\n#Setting background color#\nbackground <- \"#fff5e1\"\n\n#Setting the petal amount (n)#\nn = 20\n\n#Creating iterations\nn_iters <- 1:n\n\n#Setting x and y transformations#\ntrans <- seq(0,.5, length = n)\n\n#Setting colors#\nfills <- colorRampPalette(color_pal)(n)\n\n#Setting transparencies#\nalphas <- seq(1,.2, length = n)\n\n#Setting List options#\nlist_opts <- list(trans,\n                  fills,\n                  alphas)\n\n#=============================================================================#\n#Data Compilation--------------------------------------------------------------\n#=============================================================================#\nbase <- pmap_df(list_opts, ~unit_circle|>\n                  mutate(x = x * ..1,\n                         y = y * ..1,\n                         group = paste0(\"circle\",..1),\n                         fill = ..2,\n                         alpha = ..3\n                  )\n)\n\n\nfinal <- map_df(n_iters, ~base|>\n                  mutate(x = x + .x,\n                         group = paste0(\"circle\",.x)\n                  )\n)\n\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\nfinal |>\n  ggplot(aes(x,y, group = group))+\n  theme_void()+\n  theme(plot.background = element_rect(fill = background))+\n  geom_point(color = final$fill,position = position_jitter(width = .01, height = .02),\n             alpha = final$alpha,\n             fill = background,\n             shape = 21,\n             stroke = 3)+\n  coord_polar()\n\n#Use to save output:\n\n# ggsave(\"images/gen_2.png\",\n#        dpi = 300,\n#        device = \"png\",\n#        bg = \"transparent\",\n#        height = 10,\n#        width = 10)"
  },
  {
    "objectID": "submissions/day_03.html",
    "href": "submissions/day_03.html",
    "title": "January 3rd - Glitch Art",
    "section": "",
    "text": "Show code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\n\nlibrary(dplyr) #For data wrangling/Manipulation\nlibrary(purrr) #For list wrangling/manipulation/iterations\nlibrary(ggplot2) #For Plotting\nlibrary(RColorBrewer) #For picking out some brewer colors\n\n#=============================================================================#\n#Data Set-up-------------------------------------------------------------------\n#=============================================================================#\n\n#Making the grid#\nsquare <- tibble(x = c(0,.1,.1,0,0),\n                 y = c(0,0,.1,.1,0))\n\n#Making a single row for the grid#\nrowsq <- map_df(seq(0,5, by = .1), ~square |>\n                  mutate(x = x + .x))\n\n#Making the full grid#\nfull <- map_df(seq(0,5, by = .1), ~rowsq |>\n                 mutate(y = y + .x))\n\n#Manually calculated the groups for some reason?#\n#I don't usually do this like this but I'm too lazy to change it now#\nfull$group <- rep(paste0(\"group_\",1:2601), each = 5)\n\n#Calculated/Setting some glitch colors\nglitch_colors <- sample(c(\"#ff001e\", \"#f727f7\", \"#f7f727\", \"#27f727\", \"#001eff\", \"#000000\", \"#ffffff\", rep(NA, 100)), 2601, replace = TRUE)\n\n#Adding the glitch colors to the data set#\nfull$fill <- rep(glitch_colors, each = 5)\n\n#Getting some gray colors for the clouds#\ngrays <- brewer.pal(3, \"Greys\")\n\n#Setting the colors for the moon/planet/orb thing#\nmoon_colors <- colorRampPalette(c(\"#3E497A\", \"#21325E\", \"#7858A6\", \"#548CA8\", \"#46C2CB\", \"#2D033B\"))(100)\n\n#Setting the sizes for the moon/planet/orb object#\nmoon_sizes <- seq(250,20,length = 100)\n\n#Making the moon/planet/org thing#\nmoon <- map2_df(moon_sizes, moon_colors, ~tibble(x = 2.5, y = 2.5) |> \n                  mutate(size = .x, fill = .y )\n                )\n\n#Making the clouds#\nclouds <- full |> select(y) |> \n  filter(y > 1 & y < 4) |> \n  mutate(x = seq(0, 5, length = length(y)), \n         color = colorRampPalette(grays)(length(y)))|> \n  slice_sample(prop = .80)\n\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\nfull |>\n  ggplot()+\n  theme_void()+\n  theme(plot.background = element_rect(fill = \"#3B185F\"))+\n  geom_point(data = full, aes(x,y), \n             color = \"#1a1a1a\", \n             alpha = .2, \n             size = sample(1:15, nrow(full), replace = TRUE), \n             position = position_jitter(width = .01, height = .08))+\n  geom_point(data = full |> slice_sample(n = 100), aes(x,y), \n             alpha = sample(seq(.01,.5, length.out = 100)), \n             color = \"#ffffff\", \n             position = position_jitter(width = .01, height = .02), size = .5)+\n  geom_point(data = moon, aes(x,y), \n             size = moon$size, \n             color = moon$fill, \n             position = position_jitter(width = .02, height = .04))+\n  geom_point(data = clouds, aes(x,y), \n             color = clouds$color, \n             alpha = .004, \n             size = sample(1:15, nrow(clouds), replace = TRUE), \n             position = position_jitter(width = 1, height = .8))+\n  geom_path(aes(x,y, group = group), \n            color = \"#1a1a1a\", \n            alpha = .1)+\n  geom_polygon(aes(x,y, group = group), \n               fill = full$fill, \n               alpha = sample(seq(.1,1, length = 100), nrow(full), replace = TRUE))+\n  coord_equal(xlim = c(0,5), \n              ylim = c(0,5), \n              expand = FALSE)\n\n#To save the output:\n# ggsave(\"images/03.png\",\n#        dpi = 300,\n#        device = \"png\",\n#        bg = \"transparent\",\n#        height = 10,\n#        width = 10)"
  },
  {
    "objectID": "submissions/day_04.html",
    "href": "submissions/day_04.html",
    "title": "January 4th - Intersections",
    "section": "",
    "text": "Show code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\nlibrary(dplyr)\nlibrary(ggplot2)\n\n#=============================================================================#\n#Data Creation-----------------------------------------------------------------\n#=============================================================================#\n\n#Picking out colors to use#\nburberry_colors <- c(\"#A70100\", \"#513819\", \"#956226\", \"#747674\", \"#0D100E\", \"#ffffff\")\n\n#Background color\nback_color <- \"#B8A081\"\n  \n#Vertical Lines#\nred_lines <- tibble(x = seq(0,10, length = 10),\n                    xend = x,\n                    y = 0,\n                    yend = 10,\n                    group = \"redlines\")\n\n#Horizontal Lines#\ntan_lines <- tibble(y = seq(2,8, length = 5),\n                    yend = y,\n                    x = 0,\n                    xend = 10,\n                    group = \"tan lines\")\n\n#Background waves#\ntexture <- tibble(x = seq(0,10, length = 100), \n                  y = x) |>\n  expand.grid()\n\n#Red Fog#\ntextbar <- tibble(x = 0,\n                  xend = 10,\n                  y = seq(10,0, length = 1000),\n                  yend = y,\n                  group = \"textbar\",\n                  color = colorRampPalette(c(\"#A70100\", \"#ffffff\"))(1000))\n\n\nred_lines |>\n  ggplot(aes(x,y, group = group))+\n  theme_void()+\n  theme(plot.background = element_rect(fill = back_color))+\n  geom_path(data = texture, aes( group = x), \n            linewidth= 15, \n            color = \"#000000\", \n            alpha = 1, position = position_jitter(width = .05))+\n  geom_path(data = texture, aes( group = x), \n            linewidth= 10, \n            color = \"#555555\", \n            alpha = .3, \n            position = position_jitter(width = .05))+\n  geom_path(data = texture, aes( group = x), \n            linewidth= 10, \n            color = \"#ffffff\", \n            alpha = .1, \n            position = position_jitter(width = .05))+\n  geom_segment(aes(x = (x +.1), xend = (xend + .1), yend = yend), \n               color = \"#1a1a1a\", \n               linewidth = 5)+\n  geom_segment(aes(xend = xend, yend = yend), \n               color = burberry_colors[1], \n               alpha = .8, \n               linewidth = 5)+\n  geom_segment(data = tan_lines, aes(y = (y -.1), xend = xend, yend = yend - .1), \n             color = \"#1a1a1a\", \n             linewidth = 5)+\n  geom_segment(data = tan_lines, aes(xend = xend, yend = yend), \n               color = burberry_colors[2], \n               alpha = .8, \n               linewidth = 5)+\n  geom_segment(data = textbar, aes(xend = xend, yend = yend), \n               color = textbar$color, \n               alpha = c(seq(.1,0, length = 500),rep(0,500)), \n               linewidth = 5)+\n  coord_cartesian(xlim = c(0,10), ylim = c(0,10), expand = FALSE)"
  },
  {
    "objectID": "submissions/day_05.html",
    "href": "submissions/day_05.html",
    "title": "January 5th - Debug View",
    "section": "",
    "text": "Show code\n#=============================================================================#\n#Library Load-In---------------------------------------------------------------\n#=============================================================================#\n\nlibrary(dplyr) #For data wrangling\nlibrary(ggplot2) #For plotting\nlibrary(sp) #For polygon filtering\n\n#=============================================================================#\n#Data Set-up-------------------------------------------------------------------\n#=============================================================================#\n\n# Manual data for the road#\nroad <- tibble(x = c(0,100,55,45,0),\n               y = c(0,0,60,60,0))\n\n# Data for the grass/ground area#\ngrass <- tibble(x = c(seq(0,100, length = 200),\n                      rep(100,200),\n                      seq(100,0, length = 200),\n                      rep(0,200)),\n                y = c(rep(0,200),\n                      seq(0,60, length = 200),\n                      rep(60,200),\n                      seq(60,0, length = 200)))\n\n# Data for the stars#\nstars <- tibble(expand.grid(x = seq(0,100, length = 20),\n                            y = seq(60,100, length = 10)))\n\n# Theta/Angle to create the moon#\ntheta_moon <- seq(0,2*pi, length = 100)\n\n# Data for the moon#\nmoon <- tibble(x = 20*cos(theta_moon)+50,\n               y = 30*sin(theta_moon)+50)\n\n# Data to add texture to the road#\nroad_texture <- tibble(expand.grid(x = seq(0,100, length = 10),\n                                   y = seq(0,60, length = 10))) \n\n# Filtering out the data to only lay in our pre-made \"road\" shape#\nroad_texture <- road_texture %>%\n  mutate(logic = point.in.polygon(x,y,road$x,road$y))%>%\n  filter(logic == 1)\n\n# Data for the \"texture\" of our ground/grass\ngrass_texture <- tibble(x = rep(0,200),\n                        xend = rep(100,200),\n                        y = seq(0,60, length = 200),\n                        yend = y)\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\nstars %>%\n  ggplot(aes(x,y))+\n  theme_void()+\n  theme(plot.background = element_rect(fill = \"#301934\"))+\n  geom_point(position = \"jitter\", size = .01, color = \"white\")+\n  geom_polygon(data = moon, \n               position = position_jitter(width = .3, height = .1),\n               fill = \"#FCC201\", linewidth = 1)+\n  geom_polygon(data = moon, \n               position = position_jitter(width = .3, height = .1), \n               fill = NA, \n               color = \"black\", \n               linewidth = 1)+\n  geom_polygon(data = moon, \n               position = position_jitter(width = .3, height = .1), \n               fill = NA, \n               color = \"black\", \n               linewidth = 1)+\n  geom_polygon(data = moon, \n               position = position_jitter(width = .3, height = .1), \n               fill = NA, \n               color = \"black\", \n               linewidth = 1)+\n  geom_polygon(data = grass, \n               position = position_jitter(width = .3, height = .1), \n               fill = \"#192841\", \n               color = \"black\", \n               linewidth = 1)+\n  geom_polygon(data = grass, \n               position = position_jitter(width = .3, height = .2), \n               fill = NA, \n               color = \"black\", \n               linewidth = 1)+\n  geom_polygon(data = grass, \n               position = position_jitter(width = .3, height = .3), \n               fill = NA, \n               color = \"#203354\", \n               linewidth = 1)+\n  geom_segment(data = grass_texture, aes(x=x,y=y,xend=xend,yend=yend),\n               position = position_jitter(width = 3, height = .3), \n               color = \"black\", \n               linewidth = .3, \n               inherit.aes = FALSE, \n               alpha = sample(seq(.4,1, length = 10), nrow(grass_texture), replace = TRUE))+\n  geom_polygon(data = road,  \n               fill = \"white\", \n               alpha = .8)+\n  geom_path(data = road,  \n            color = \"black\", \n            linewidth= 3)+\n  geom_line(data = road_texture, aes(group = x), \n            linewidth = 1, \n            color = \"#000000\")+\n  geom_line(data = road_texture, aes(group = y), \n            linewidth = 1, \n            color = \"#000000\")+\n  geom_line(data = road, aes(group = y), \n            linewidth = 1, \n            color = \"#000000\")+\n  geom_point(data = road, \n             size = 5, \n             color = \"#cc5500\")+\n  geom_point(data = road_texture, \n             size = 5,\n             color = \"#cc5500\")+\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100), \n                  expand = FALSE)\n\n#To save the output:\n# ggsave(\"images/05.png\",\n#        dpi = 300,\n#        device = \"png\")"
  },
  {
    "objectID": "submissions/day_06.html",
    "href": "submissions/day_06.html",
    "title": "January 6th - Steal Like an Artist",
    "section": "",
    "text": "Show code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\n\nlibrary(dplyr) #Data wrangling\nlibrary(showtext) #Custom fonts\nlibrary(ggplot2) #for plotting\n\n#=============================================================================#\n#Font load-in------------------------------------------------------------------\n#=============================================================================#\n\nfont_add_google(\"Neucha\")\nshowtext_auto()\n\n#=============================================================================#\n#Data Set up-------------------------------------------------------------------\n#=============================================================================#\n\n#Angles for making a circle#\ntheta <- seq(0,2*pi, length.out = 100)\n\n#Setting color options#\ngreen <- \"#A1BD56\"\nred <- \"#D12929\"\ndark_orange <- \"#D35421\"\nlight_orange <- \"#EDAF74\"\nmedium_orange <- \"#EB822F\"\npink <- \"#ECAFCE\"\nlight_pink <- \"#F1D2E1\"\nmedium_red <- \"#D94253\"\nblack <- \"#000000\"\nbackground <- \"#F0F1EC\"\n\n#Making a standard unit circle#\nunit_circle <- tibble(x = cos(theta),\n                    y = sin(theta))\n\n#Manually Made Circles)\ngreen_circle <- unit_circle |>\nmutate(x = x - 1,\n       y = y + 1,\n       group = \"green\")\n\nred_circle <- unit_circle |>\nmutate(x = x - 1,\n       y = y - 1.5,\n       group = \"red\")\n\npink_circle <- unit_circle |>\nmutate(x = x + .2,\n       y = y,\n       group = \"pink\")\n\nlight_pink_circle <- unit_circle |>\nmutate(x = x + 2,\n       y = y,\n       group = \"lightpink\")\n\nmed_red_circle <- unit_circle |>\nmutate(x = x + 3.5,\n       y = y + 1,\n       group = \"med_red\")\n\nblack_circle <- unit_circle |>\nmutate(x = x + 3.3,\n       y = y -1.5 ,\n       group = \"black_red\")\n\n#Text Objects#\nheadline <- tibble(x = 1.23,\n                 y = 1.2,\n                 label = \"what looks good today\",\n                 group = \"text\")\n\nbyline <- tibble(x = -.4,\n               y = .2,\n               label = \"may not look good tomorrow\",\n               group = \"text\")\n\npink_text <- tibble(x = 2.01,\n                  y = .3,\n                  label = \"what lc\",\n                  group = \"text\")\n\npinkbyline <- tibble(x = 2.1,\n                   y = -.8,\n                   label = \"may not look\",\n                   group = \"text\")\n\nred_text <- tibble(x = -1.3,\n                 y = -1.5,\n                 label = \"what lc\",\n                 group = \"text\")\n\nredbyline <- tibble(x = -.2,\n                  y = -1.5,\n                  label = \"may not look\",\n                  group = \"text\")\n\nblacktext <- tibble(x = 3,\n                  y = -1.5,\n                  label = \"NOW'S THE TIME\",\n                  group = \"text\")\n\n#Texture for the overall image#\ntexture <- tibble(expand.grid(x = seq(-1.7,4.2, length.out = 100),\n                            y = seq(-3,2, length.out = 100),\n                            group = \"texture\"))\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\ngreen_circle |>\n  ggplot(aes(x,y, group = group))+\n  theme_void()+\n  theme(plot.background = element_rect(fill = background))+\n  geom_polygon(data = red_circle,\n               fill = red, \n               color = light_orange, \n               linewidth = 5)+\n  geom_polygon(data = pink_circle, \n               fill = pink, \n               color = pink, \n               linewidth = 5, \n               position = position_jitter(width = .005, height = .005))+\n  geom_polygon(data = med_red_circle, \n               fill = medium_red, \n               color = medium_red,\n               linewidth = 5, \n               position = position_jitter(width = .005, height = .005))+\n  geom_polygon(data = light_pink_circle, \n               fill = light_pink, \n               color = medium_orange, \n               linewidth = 5)+\n  geom_polygon(fill = green, \n               color = dark_orange, \n               linewidth = 5, \n               position = position_jitter(width = .005, height = .005))+\n  geom_polygon(data = black_circle, \n               fill = black, \n               color = black, \n               linewidth = 5, \n               position = position_jitter(width = .005, height = .005))+\n  geom_text(data = headline, aes(x,y,label = label), \n            size = 37.5, \n            family = \"Neucha\")+\n  geom_text(data = byline, aes(x,y,label = label), \n            size = 8, \n            family = \"Neucha\")+\n  geom_text(data = pink_text, aes(x,y,label = label), \n            size = 34.2, \n            family = \"Neucha\", \n            color = medium_orange)+\n  geom_text(data = pinkbyline, aes(x,y,label = label), \n            size = 8, \n            family = \"Neucha\", \n            color = medium_orange)+\n  geom_text(data = red_text, aes(x,y,label = label), \n            size = 34.2, \n            family = \"Neucha\", \n            color = light_orange, \n            angle = 90)+\n  geom_text(data = redbyline, aes(x,y,label = label), \n            size = 8, \n            family = \"Neucha\", \n            color = light_orange, \n            angle = 90)+\n  geom_text(data = blacktext, aes(x,y,label = label), \n            size = 9, \n            family = \"Neucha\", \n            color = \"white\")+\n  geom_path(data = texture, color = colorRampPalette(c(background,\"#C48E8E\"))(nrow(texture)), \n            linewidth = sample(seq(.1,3, length.out = 20), nrow(texture), replace = TRUE), \n            alpha = .05, \n            position = position_jitter(width = .005, height = .005))+\n  coord_equal(xlim = c(-1.7,4.2), \n              ylim = c(-3,2), \n             expand = FALSE)\n\n#To save the output:\n# ggsave(\"images/06.png\",\n#        dpi = 300,\n#        device = \"png\")"
  },
  {
    "objectID": "submissions/day_08.html",
    "href": "submissions/day_08.html",
    "title": "January 8th - Signed Distance Functions (Code Not Available)",
    "section": "",
    "text": "Code Not Available/Ready for Open Source"
  },
  {
    "objectID": "submissions/day_07.html",
    "href": "submissions/day_07.html",
    "title": "January 7th - Sample a color palette from your favorite movie/album cover",
    "section": "",
    "text": "Show code\n#=============================================================================#\n#library Load-in---------------------------------------------------------------\n#=============================================================================#\nlibrary(dplyr) #For data wrangling/manipulation\nlibrary(purrr) #For iterations/list handling\nlibrary(ggplot2) #For Plotting\n\n#=============================================================================#\n#Data and color Set up----------------------------------------------------------\n#===========================================================================#\n\n#Colors#\nblues <- c(\"#06273A\", \"#1A374D\", \"#335172\", \"#6B869B\", \"#BFCBD3\", \"#FFFFFF\")\n\nred <- \"#F1371B\"\n  \n#Limit Setting#\nxmin <- 0\nymin <- 0\nxmax <-15\nymax <- 25\n\n#Specs for grid data#\n\n#Counts for the grid#\nsquare_n <- 5\nn <- 75\n\n#grid transformations#\nx_trans <- seq(xmin,xmax, length.out = 100)\ny_trans <- seq(ymin,ymax, length.out = 100)\n\n#grouping/color specs#\ngroupn_row <- length(x_trans) * square_n * length(y_trans)\ncolor_n <- groupn_row/5\nsquare_colors <- colorRampPalette(blues)(color_n)\nborder_colors <- map_chr(square_colors, ~colorRampPalette(c(.x, \"#ffffff\"))(10)[7])\n\n#Grid compilation#\nsquare <- tibble(x = c(0,1,1,0,0),\n                 y = c(0,0,1,1,0))\n\nsquare_row <- map_df(x_trans, ~square |>\n                       mutate(x = x + .x))\n\nsquare_grid <- map_df(y_trans, ~square_row |>\n                        mutate(y = y + .x))\n\nsquare_grid$fill <- rep(square_colors, each = 5)\nsquare_grid$color <- rep(border_colors, each = 5)\nsquare_grid$group <- rep(paste0(\"group\", 1:color_n), each = 5)\n\n#Polygon/building work#\nlevel1 <- sample(seq(23,20, length.out = 20), n, replace = TRUE)\nlevel2 <- sample(seq(20,17, length.out = 20), n, replace = TRUE)\nlevel3 <- sample(seq(17,15, length.out = 20), n, replace = TRUE)\nwidths <- sample(seq(3,20, length.out = 30), (n*3), replace = TRUE)\n\n#Setting up needed iteration options#\ncolors_n <- rep(blues[3:1], each = n)\nlevels_n <- c(level3, level2, level1)\nstarts <- sample(seq(xmin, xmax, length.out = 30), (n*3), replace = TRUE)\n\nlist_opts <- list(levels_n, widths, colors_n, starts)\n\n#building compilation#\nbuildings <- pmap_df(list_opts, ~tibble(x = ..4,\n                                        xend = x,\n                                        y = ymax,\n                                        yend = ..1,\n                                        colors = ..3,\n                                        size = ..2))\n\n#Work for the red circle#\n\n#Setting the angles of the circles#\ntheta <- seq(0, 2*pi, length.out = 50)\n\n#Creating a base unit circle#\nspiral <- tibble(x = cos(theta),\n                 y = sin(theta))\n\n#compilation or the red circle#\nspiral_df <- map2_df(rev(colorRampPalette(c(red, \"#ffffff\", red, \"#06273A\"))(50)), seq(0,6, length.out = 50), ~spiral |>\n                       mutate(x = x*.y + 7.5,\n                              y = y * .y + 5,\n                              group = paste0(\"group\",.y),\n                              fill = .x,\n                              x = rev(x),\n                              y = rev(y)))\n\n#Texture overlay for the image#\ntexture <- tibble(expand.grid(x = seq(xmin,xmax, length.out = 50),\n                           y = seq(ymin,ymax, length.out = 50)))\n\n\n\n\nbuildings |>\n  ggplot(aes(x,xend = xend,y,yend = yend))+\n  theme_void()+\n  geom_polygon(data = square_grid, aes(x,y, group = group), \n               color = colorRampPalette(c(\"#ffffff\",blues[3:1]))(nrow(square_grid)), \n               fill = rev(square_grid$fill), \n               inherit.aes = FALSE,\n               linewidth = .1, \n               alpha = .2, \n               position = position_jitter(width = .1, height = .1)) +\n  geom_segment(linewidth = buildings$size,\n               color = buildings$colors)+\n  geom_polygon(data = spiral_df, aes(x,y, group = group), \n               fill = spiral_df$fill, \n               inherit.aes = FALSE, alpha = .2)+\n  geom_path(data = spiral_df, aes(x,y, group = group), \n            color = \"#000000\", \n            linewidth = .3, \n            position = position_jitter(width = .03, height = .02), \n            inherit.aes = FALSE, \n            alpha = seq(1,0, length.out = nrow(spiral_df)))+\n  geom_path(data = texture, aes(x,y), \n            inherit.aes = FALSE, \n            color = sample(blues, nrow(texture), replace = TRUE), \n            linewidth = sample(seq(0,10, length.out = 30), nrow(texture), replace = TRUE), \n            alpha = .009)+\n  geom_path(data = texture, aes(x,y), \n            inherit.aes = FALSE, \n            color = \"#ffffff\", \n            linewidth = .1, \n            alpha = .03)+\n  coord_equal(xlim = c(xmin,xmax),\n              ylim = c(ymin,ymax),\n              expand = FALSE)\n\n#To save the output:\n# ggsave(\"07.png\",\n#        dpi = 300,\n#        device = \"png\",\n#        bg = \"transparent\")"
  },
  {
    "objectID": "submissions/day_09.html",
    "href": "submissions/day_09.html",
    "title": "January 9th - Plants",
    "section": "",
    "text": "Show code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\nlibrary(dplyr) #Data wrangling\nlibrary(purrr) #list manipulation\nlibrary(ggplot2) #Plotting\nlibrary(sp) #polygon manipulation\n\n#=============================================================================#\n#Data Set up-------------------------------------------------------------------\n#=============================================================================#\n\n#Amount of grass blades desired#\nn = 150\n\n#Grass height/size#\ngrass_height = sample(seq(3,6.25, length.out = 50), n, replace = TRUE)\ngrass_level = 1\n\n#Grass \"waviness\"\nwaviness = sample(seq(5,50, length.out = 25), n, replace = TRUE)\n\n#Grass wave direction#\ndirection = c(\"left\", \"right\")\n\n#Color options#\ngrass_color = c(\"#A3CB25\", \"#CEE633\", \"#88BB1D\", \"#26610F\", \"#428115\",\"#0C3607\")\nborder_color = map_chr(grass_color, ~colorRampPalette(c(.x, \"#0C3607\"))(10)[7])\nsky_color = c(\"#003D59\", \"#167070\", \"#44857D\", \"#2BA8D4\")\n\n#X scale transformations#\nx_trans <- sample(seq(1,9, length.out = 50), n, replace = TRUE)\n\n#List options for iterations#\nlist_opts <- list(grass_height,\n                  grass_level,\n                  waviness,\n                  x_trans,\n                  colorRampPalette(grass_color)(n),\n                  colorRampPalette(border_color)(n),\n                  1:n)\n\n#Angle setting for circle\ntheta <- seq(0,2*pi, length.out = 100)\n\n\n#=============================================================================#\n#Data Compilation--------------------------------------------------------------\n#=============================================================================#\n\n#circle data for the \"window\"\ncircle <- tibble(x = (cos(theta)*4) + 5,\n                 y = (sin(theta)*4) + 5)\n\n#Grass data compilation#\ngrass <- pmap_df(list_opts, ~tibble(y = c(seq(..2,..1,length.out = 1000),\n                                          seq(..1,..2, length.out = 1000),\n                                          ..2),\n                                    x = cos(y)/..3) |>\n                   mutate(x = x + c(rep(0,1000),\n                                    seq(0,.5, length.out = 1000),\n                                    0),\n                          group = paste0(\"plant\",..7),\n                          fill = ..5,\n                          color = ..6,\n                          x = x + ..4)) |>\n  mutate(logic = point.in.polygon(x,y, circle$x, circle$y)) |>\n  filter(logic == 1)\n\n\n#Cloud Data#\ntexture <- tibble(expand.grid(x = seq(0,10, length.out = 50),\n                  y = seq(0,10, length.out = 50))) |>\n  mutate(logic = sp::point.in.polygon(x,y, circle$x, circle$y)) |>\n  filter(logic == 1) \n\ntexture <- texture |>\n  arrange(y) |>\n  mutate(color = colorRampPalette(c(sky_color, \"#ffffff\"))(nrow(texture)))\n\n#Background Data\nback_texture <- tibble(expand.grid(x = seq(0,10, length.out = 50),\n                                y = seq(0,10, length.out = 50)))\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\ngrass |>\n  ggplot(aes(x,y, group = group))+\n  theme_void()+\n  theme(plot.background = element_rect(fill = \"#751109\"))+\n  geom_path(data = back_texture, \n            aes(group = y), \n            alpha = .03,\n            position = position_jitter(width = .05, height = .04),\n            linewidth = sample(seq(1,25, length.out = nrow(back_texture))), \n            color = sample(colorRampPalette(c(\"#000000\", \"#ffffff\"))(nrow(back_texture))))+\n  geom_polygon(data = circle, aes(x,y), \n               inherit.aes = FALSE, \n               fill = sky_color[4], \n               color = \"#000000\", \n               linewidth =5)+\n  geom_point(data = texture, aes(x,y, group = x),\n             position = position_jitter(width =.05, height = .06), \n             color = texture$color, \n             inherit.aes = FALSE,  \n             size = sample(1:10, nrow(texture), replace = TRUE), \n             alpha = .04)+\n  geom_path(data = circle, aes(x,y), \n            inherit.aes = FALSE, \n            color = \"#1a1a1a\", \n            linewidth = 10)+\n  geom_polygon(fill = grass$fill, \n               color = grass$color, \n               linewidth = .4, \n               position = position_jitter(width = .003, height = .001))+\n  coord_equal(xlim = c(0,10), \n              ylim = c(0,10))\n\n#To save output:\n# ggsave(\"images/05.png\",\n#        dev = \"png\",\n#        dpi = 300,\n#        bg = \"transparent\")"
  },
  {
    "objectID": "submissions/day_10.html",
    "href": "submissions/day_10.html",
    "title": "January 10th - Generative Music",
    "section": "",
    "text": "Show code\n#=============================================================================#\n#Library Load-In---------------------------------------------------------------\n#=============================================================================#\nlibrary(dplyr) #Data wrangling\nlibrary(purrr) #List Manipulation/iteration work\nlibrary(stringr) #String Manipulation\nlibrary(ggplot2) #For plotting\nlibrary(showtext) #For Custom Fonts\n\n#=============================================================================#\n#Font Load-in------------------------------------------------------------------\n#=============================================================================#\n\nfont_add(family = \"tequila\", regular = \"submissions/helpers/tequila/TEQUILA_.TTF\")\nshowtext_auto()\n\n#=============================================================================#\n#Data Set up-------------------------------------------------------------------\n#=============================================================================#\n\n#Every word in the song separated by comma#\nlyrics <- \"I'm,on,my,time,with,everyone,I,have,very,bad,posture,Sit,and,drink,Pennyroyal,Tea,Distill,the,life,that's,inside,of,me,Sit,and,drink,Pennyroyal,Tea,I'm,anemic,royalty,Give,me,a,Leonard,Cohen,afterworld,So,I,can,sigh,eternally,I'm,so,tired,I,can't,sleep,I'm,a,liar,and,a,thief,Sit,and,drink,Pennyroyal,Tea,I'm,anemic,royalty,I'm,on,warm,milk,and,laxatives,Cherry-flavored,antacids\"\n\n#A base chord box#\nchord_box <- tibble(x = c(rep(1,6), 1:6),\n                    y = c(1:6, rep(1,6)),\n                    xend = c(rep(6,6), 1:6),\n                    yend = c(1:6, rep(6,6)),\n                    group = c(rep(\"vert\",6), rep(\"horiz\",6)),\n                    size = c(rep(1,5),3,rep(1,6)))\n\n#Creating the set of chord boxes#\nboxes <- map2_df(c(0,rep(7,6)), 0:6, ~chord_box|>\n                   mutate(x = x + (.x * .y),\n                          xend = xend + (.x * .y)))\n\n#Manual calcuation of the chord positions#\nchord_points <- tibble(x = c(3,4,5,\n                             1,2,6,\n                             2,3,6,\n                             4,5,6,\n                             2,3,\n                             3,\n                             3,4),\n                       y = c(4.5,4.5,5.5,\n                             3.5,4.5,3.5,\n                             3.5,4.5,5.5,\n                             4.5,3.5,4.5,\n                             5.5,3.5,\n                             4.5,\n                             4.5,4.5),\n                       group = c(rep(\"Am\",3),\n                                 rep(\"G\",3),\n                                 rep(\"C\",3),\n                                 rep(\"D\",3),\n                                 rep(\"Bb5\",2),\n                                 rep(\"A5\",1),\n                                 rep(\"Asus2\",2))) |>\n  mutate(x = x + c(rep(0,3),\n                   rep(7*1,3),\n                   rep(7*2,3),\n                   rep(7*3,3),\n                   rep(7*4,2),\n                   rep(7*5,1),\n                   rep(7*6,2)))\n\n#Adding the chord titles#\nchord_annotations <- tibble(chords = c(\"Am\",\"G\",\"C\",\"D\",\"Bb5\",\"A5\",\"Asus2\"),\n                            x = c(3.5 + 7*0:6),\n                            y = 8.3)\n\n#Adding the muted string symbols#\nxes <- tibble(text = \"X\",\n              x = c(1,\n                    1 + 14,\n                    1 + 21, 2 + 21,\n                    1 + 28, 4 + 28, 5 + 28, 6 + 28,\n                    1 + 35, 4 + 35, 5 + 35, 6 + 35,\n                    1 + 42),\n              y = 6.7)\n\n#Adding some overall texture#\ntexture <- tibble(expand.grid(y = -10:20,\n                              x = 0:48))\n\n#Creating a data set for the splt lyrics#\nwords <- tibble(text = unlist(strsplit(lyrics,\",\"))) |>\n  mutate(x = sample(seq(0,48, length.out = 100), 70),\n         y = c(sample(seq(-10,5, length.out = 100), 35),\n               sample(seq(11,20, length.out = 100), 35)))\n\nboxes |>\n  ggplot(aes(x,y, xend = xend, yend = yend))+\n  theme_void()+\n  theme(plot.background = element_rect(fill = \"#FFFCE9\"))+\n  geom_point(data = texture, aes(x,y), \n             inherit.aes = FALSE, \n             size = sample(1:50, nrow(texture), replace = TRUE), \n             alpha = .04, color = \"#F2EDC5\", \n             position = position_jitter(width = .9, height = .5))+\n  geom_text(data = words, aes(x,y, label = text), \n            inherit.aes = FALSE, \n            family = \"tequila\", \n            size = sample(5:20, nrow(words), replace = TRUE), \n            color = sample(colorRampPalette(c(\"#000000\",\"#751109\"))(nrow(words))), \n            angle = sample(0:180, nrow(words)))+\n  geom_path(data = texture, aes(x,y), \n            inherit.aes = FALSE,  \n            alpha = .04, \n            linewidth = 10, color = \"#751109\", \n            position = position_jitter(width = .9, height = .5))+\n  geom_segment(linewidth = boxes$size) +\n  geom_point(data = chord_points, aes(x,y), \n             size = 3, \n             inherit.aes = FALSE, \n             shape = 21, \n             color = \"#000000\", \n             fill = \"#751109\")+\n  geom_text(data = chord_annotations, aes(x,y, label = chords), \n            inherit.aes = FALSE, \n            family = \"tequila\", \n            size = 12, \n            color = \"#751109\", \n            fontface = \"bold\")+\n  geom_text(data = xes, aes(x,y, label = text), \n            inherit.aes = FALSE, \n            family = \"tequila\", \n            size = 6 )+\n  coord_equal(ylim = c(-10,20), \n              xlim = c(0,48))"
  },
  {
    "objectID": "submissions/day_11.html",
    "href": "submissions/day_11.html",
    "title": "January 11th - Suprematism",
    "section": "",
    "text": "Show code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(sp)\nlibrary(ggplot2)\n\n#=============================================================================#\n#Data Set up-------------------------------------------------------------------\n#=============================================================================#\n\n#Data for vertical lines#\nvert <- tibble(x = c(seq(0,.1, length.out = 100),\n                     rep(.1, 100),\n                     seq(.1,0, length.out = 100),\n                     rep(0, 100)),\n               y = c(rep(0,100),\n                     seq(0,10, length.out = 100),\n                     rep(10, 100),\n                     seq(10,0, length.out = 100)),\n               group = rep(\"vert\", 400)\n)\n\n#Data for horizontal lines#\nhoriz <- tibble(x = c(seq(0,10, length.out = 100),\n                     rep(10, 100),\n                     seq(10,0, length.out = 100),\n                     rep(0, 100)),\n               y = c(rep(0,100),\n                     seq(0,.1, length.out = 100),\n                     rep(.1, 100),\n                     seq(.1,0, length.out = 100)),\n               group = rep(\"horiz\", 400)\n)\n\n#Setting angles for circles#\ntheta <- seq(0,2*pi, length.out = 100)\n\n#Creating the first circle#\ncircles <- tibble(x = cos(theta) * 5,\n                  y = sin(theta) * 5)\n\n#And the second#\ncircles2 <- circles |>\n  mutate(x = x + 10,\n         y = y + 10)\n\n\n#Setting transformations for lines#\ntrans <- seq(0,10, by = .15)\n\n#Vertical data#\nverts <- map_df(trans, ~vert |>\n                  mutate(x = x + .x,\n                         group = paste0(group,.x))) |>\n  mutate(logic = point.in.polygon(x,y, circles$x, circles$y),\n         logic2 = point.in.polygon(x,y, circles2$x, circles2$y)) |>\n  filter(logic == 0 & logic2 == 0)\n\n#Horizontal data for circle 1#\nhoriz1 <- map_df(trans, ~horiz |>\n                  mutate(y = y + .x,\n                         group = paste0(group,.x)))  |>\n  mutate(logic = point.in.polygon(x,y, circles$x, circles$y)) |>\n  filter(logic == 1)\n\n#And circle 2#\nhoriz2 <- map_df(trans, ~horiz |>\n                   mutate(y = y + .x,\n                          group = paste0(group,.x)))  |>\n  mutate(logic = point.in.polygon(x,y, circles2$x, circles2$y)) |>\n  filter(logic == 1)\n\n#Overall texture overlay#\ntexture <- tibble(x = seq(0,10, length.out = 100),\n                   y = x) |>\n  expand.grid()\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\nverts |>\n  ggplot(aes(x,y, group = group))+\n  theme_void() +\n  theme(plot.background = element_rect(fill = \"#af3918\"))+\n  geom_path(data = texture, aes(x,y,group = x), \n            inherit.aes = FALSE, \n            linewidth = 5, \n            alpha = .05)+\n  geom_polygon(color = NA, \n               fill = \"#1a1a1a\", \n               position = position_jitter(width = .05, height = .02), \n               linewidth = .5)+\n  geom_polygon(data = horiz1, \n               fill =\"#ffffff\", \n               color = \"#1a1a1a\", \n               linewidth = .8)+\n  geom_polygon(data = horiz2, \n               fill = \"#ffffff\", \n               color = \"#1a1a1a\", \n               linewidth = 1.5)+\n  coord_equal(xlim = c(0,10),\n              ylim = c(0,10),\n              expand = FALSE)\n\n#To save output:\n# ggsave(\"11.png\",\n#        bg = \"transparent\",\n#        device = \"png\",\n#        dpi = 400)"
  },
  {
    "objectID": "submissions/day_12.html",
    "href": "submissions/day_12.html",
    "title": "January 12th - Tessellation",
    "section": "",
    "text": "Show code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\n\nlibrary(dplyr) #Data Wrangling\nlibrary(purrr) #Iteration work\nlibrary(ggplot2) #Plotting\n\n#=============================================================================#\n#Data Set-up-------------------------------------------------------------------\n#=============================================================================#\n\n#First Set of patterns\nvert1 <- tibble(x = seq(0,1, length.out = 5),\n               xend = x,\n               y =0,\n               yend =1,\n               group = \"vert\")\n\ndiagonal1 <- tibble(x = c(0,0,0,0,.25,.5,.75),\n                   xend = c(.25,.5,.75,1,1,1,1),\n                   y = c(.75, .5, .25, 0, 0,0,0),\n                   yend = c(1,1,1,1,.75,.5,.25)) |>\n  mutate(x = x +1,\n         xend = xend +1,\n         group = \"diagonal_up\")\n\nhoriz1 <- tibble(x = 0,\n                xend = 1, \n                y = seq(0,1, length.out = 5),\n                yend = y) |>\n  mutate(x = x + 2,\n         xend = xend + 2,\n         group = \"horiz\")\n\ndiagonal1a <- tibble(x = c(.75,.5,.2,0,0,0,0),\n                    xend = c(1,1,1,1,.75,.5,.25),\n                    y = c(1,1,1,1,.75,.5,.25),\n                    yend = c(.75,.5,.25,0,0,0,0)) |>\n  mutate(x = x + 3,\n         xend = xend + 3,\n         group = \"diagonal_down\")\n\nvert1a <- vert1 |>\n  mutate(x = x + 4,\n         xend = xend + 4)\n\nrow1_start <- rbind(vert1,diagonal1,horiz1,diagonal1a,vert1a)\nrow1_end <- row1_start |>\n  mutate(x = x + 5,\n         xend = xend + 5)\n\nrow1 <- rbind(row1_start, row1_end)\n\n#Second set of patterns#\n\ndiagonal2 <- diagonal1 |>\n  mutate(x = x - 1,\n         xend = xend - 1)\n\nvert2 <- vert1 |>\n  mutate(x = x + 1,\n         xend = xend + 1)\n\ndiagonal2a <- diagonal1a |>\n  mutate(x = x + 1,\n         xend = xend + 1)\n\nvert2a <- vert1 |>\n  mutate(x = x + 3,\n         xend = xend + 3)\n\n\nrow2_start <- rbind(diagonal2,vert2,horiz1,vert2a,diagonal2a)\nrow2_end <- row2_start |>\n  mutate(x = x + 5,\n         xend = xend + 5)\n\nrow2 <- rbind(row2_start, row2_end)\n\nrow2 <- row2 |>\n  mutate(y = y + 1,\n         yend = yend + 1)\n\n#Grid Lines#\ngridlines1 <- tibble(x = seq(0,10, length = 11),\n                    xend = x,\n                    y = 0,\n                    yend = 10)\n\ngridlines2 <- tibble(x = 0,\n                     xend = 10,\n                     y = seq(0,10, length = 11),\n                     yend = y)\n\n#Final binding of patterns#\nchunk <- rbind(row1, row2)\n\n#Y scale transformations#\nytrans <- 0:4\n\n# Final pattern data#\nfinal_data <- map_df(ytrans, ~chunk |>\n                       mutate(y = y + 2*.x,\n                              yend = yend + 2*.x))\n\n#Background colors#\nbackground <- tibble(x = seq(0,10, length.out = 1000),\n                     xend = x,\n                     y = 0,\n                     yend = 10,\n                     color = colorRampPalette(c(\"#000000\",\"#af3918\",\"#000000\", \"#a21152\",\"#000000\", \n                                                \"#822b75\",\"#000000\",\"#612884\",\"#000000\",\"#154baf\",\n                                                \"#000000\",\"#0b82b9\",\"#000000\", \"#277e9d\",\"#000000\",\n                                                \"#488e35\",\"#000000\",\"#e3a934\",\"#000000\",\"#b2336a\",\"#000000\"))(1000),\n                    group = \"back\")\n\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\nfinal_data |>\n  ggplot(aes(x,y, xend = xend, yend = yend, group = group))+\n  theme_void()+\n  theme(plot.background = element_rect(fill = \"#277e9d\"))+\n  geom_segment(data = background, color = background$color, \n               linewidth = 1)+\n  geom_segment(color = \"black\", \n               linewidth = 2)+\n  geom_segment(color = \"white\", \n               linewidth = .5, \n               linetype = 2)+\n  geom_segment(data = gridlines1, aes(group = \"grid1\"), \n               linewidth = 4)+\n  geom_segment(data = gridlines2, aes(group = \"grid2\"), \n               linewidth = 4)+\n  coord_equal(xlim = c(0,10), \n              ylim = c(0,10), \n              expand = FALSE)"
  },
  {
    "objectID": "submissions/day_13.html",
    "href": "submissions/day_13.html",
    "title": "January 13th - Something You’ve Always Wanted to Learn",
    "section": "",
    "text": "Show code\n#=============================================================================#\n#Library Load in---------------------------------------------------------------\n#=============================================================================#\n\nlibrary(dplyr) #Data Wrangling\nlibrary(purrr) #List wrangling/iterations\nlibrary(ggplot2) #Plotting\nlibrary(ambient) #Noise work\n\n#=============================================================================#\n#Data Set up-------------------------------------------------------------------\n#=============================================================================#\n\n#Curl creation for noise#\nupdate_curl <- function(current_state, step_size = .000008, ...) {\n  curl <- curl_noise(\n    x = current_state$x, \n    y = current_state$y,\n    ...\n  )\n  next_state <- current_state |>\n    mutate(\n      x = x + curl$x * step_size,\n      y = y + curl$y * step_size,\n      time = time + 1\n    )\n  return(next_state)\n}\n\n#Setting up the limits for the coordinates#\ncoords <- seq(0, 1, length.out = 400)\n\n#Creating three passes of the noise curling#\ntime_1 <- long_grid(x = coords, y = coords) |> \n  mutate(id = row_number(), time = 1)\n\ntime_2 <- time_1 |>\n  update_curl(\n    generator = gen_simplex,\n    frequency = 10, \n    seed = 05181990\n  )\n\ntime_3 <- time_2 |> \n  update_curl(\n    generator = gen_simplex,\n    frequency = 10, \n    seed = 11172022\n  )\n\n#Binding into one data frame#\n\ndat123 <- bind_rows(time_1,time_3,time_2)\n\n#Generating the simplex noise#\ndat123 <- dat123 |>\n  update_curl(\n    generator = gen_simplex,\n    frequency = 5, \n    seed = 411\n  )\n\n#Setting a color palette#\ncolorpal <- c(\"#af3918\", \"#a21152\", \"#822b75\",\"#612884\",\"#154baf\",\n                       \"#0b82b9\", \"#277e9d\",\"#488e35\",\"#e3a934\",\"#b2336a\")\n                       \n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\ndat123 |>\n  ggplot(aes(x, y, group = id)) + \n  theme_void() +\n  theme(plot.background = element_rect(fill = \"#000000\")) +\n  geom_path(colour = colorRampPalette(colorpal)(nrow(dat123)), linewidth = 2) +\n  coord_equal()\n\n#To save the output:\n# ggsave(\"images/13.png\",\n#        bg = \"transparent\",\n#        device = \"png\",\n#        dpi = 300)"
  },
  {
    "objectID": "submissions/day_14.html",
    "href": "submissions/day_14.html",
    "title": "January 14th - Aesemic",
    "section": "",
    "text": "Show code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\nlibrary(dplyr) #Data Wrangling\nlibrary(purrr) #List Manipulation/Iterations\nlibrary(ggplot2) #Plotting\n\n#=============================================================================#\n#Data Set-up-------------------------------------------------------------------\n#=============================================================================#\n\n#Number of circles#\nn = 20\n\n#Setting angles of circle#\ntheta <- seq(0,2*pi, length = 1000)\n\n#Making base circle#\ncircle <- tibble(x = cos(theta),\n                 y = sin(theta))\n\n#Setting options for iterations#\n\n#circle radi#\nradi <- seq(1,50, length = n)\n\n#Groupings#\ngroup_names <- paste0(\"group\", radi)\n\n#Jitter settings#\njitter_trans <- seq(.5,.01, length = n)\n\n#colors for circles#\ncolors <- colorRampPalette(c(\"#EB382A\",\"#000000\",\"#EB382A\",\"#000000\",\"#EB382A\",\"#000000\",\"#EB382A\"))(n)\n\n#Colors for text#\ntext_colors <- colorRampPalette(c(\"#000000\",\"#ffffff\",\"#000000\",\"#ffffff\",\"#000000\",\"#ffffff\",\"#000000\"))(n)\n\n#Accounting for border jitter#\nlast_group <- tail(group_names,1)\n\n#Circle Options#\ncircle_options <- list(radi,\n                       group_names,\n                       jitter_trans,\n                       colors,\n                       text_colors)\n\n#=============================================================================#\n#Data Compilation--------------------------------------------------------------\n#=============================================================================#\n\n#For circles#\ncircles <- pmap_df(circle_options, ~circle |>\n                     mutate(x = x * ..1,\n                            y = y * ..1,\n                            group = ..2) |>\n                     mutate(x = if_else(group == last_group, x, jitter(x, amount = ..3)),\n                            y = if_else(group == last_group, y, jitter(y, amount = ..3)),\n                            fill = ..4,\n                            color = ..5))\n\n#For overall texture#\ntexture <- tibble(x = seq(-51,51, length = 100),\n                  y = x) |> \n  expand.grid()\n\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\ncircles |>\n  ggplot(aes(x,y, group = group))+\n  theme_void()+\n  theme(plot.background = element_rect(fill = \"#E4C8A6\"))+\n  geom_path(data = texture, \n            linewidth = sample(seq(.01,.9, length = 20), nrow(texture), replace = TRUE), \n            aes(group = x), \n            color = \"#845244\", \n            position = position_jitter(width = .002, height = .003),\n            alpha = sample(seq(.01,.7, length = 20), nrow(texture), replace = TRUE))+\n  geom_path(data = texture, \n            linewidth = sample(seq(.01,.9, length = 20), nrow(texture), replace = TRUE), \n            color = \"#845244\", \n            position = position_jitter(width = .002, height = .003),\n            alpha = sample(seq(.01,.7, length = 20), nrow(texture), replace = TRUE), aes(group = y))+\n  geom_path(linewidth = 15, \n            color = circles$fill)+\n  geom_point(data = texture, aes(x,y), \n             inherit.aes = FALSE, \n             size = sample(seq(5,10, length = 20), nrow(texture), replace = TRUE), \n             color = \"#845244\", \n             position = position_jitter(width = .02, height = .03),\n             alpha = sample(seq(.01,.08, length = 20), nrow(texture), replace = TRUE))+\n  geom_path(linewidth = sample(seq(.1, .5, length = 50), nrow(circles), replace = TRUE), \n            position = position_jitter(width = .05, height = .08),\n            color = circles$color)+\n  coord_equal(expand = FALSE)"
  },
  {
    "objectID": "submissions/day_15.html",
    "href": "submissions/day_15.html",
    "title": "January 15th - Sine Waves",
    "section": "",
    "text": "Show code\n#=============================================================================#\n#Lbrary Load-in----------------------------------------------------------------\n#=============================================================================#\nlibrary(dplyr) #Data Wrangling\nlibrary(purrr) #List manipulation/iteration\nlibrary(ggplot2) #Plotting\n\n#=============================================================================#\n#Data Set-up-------------------------------------------------------------------\n#=============================================================================#\n\n#number of waves#\nn = 1000\n\n#Limits of the page#\nxmin <- 0\nxmax <- 20\n\nymin <- 0\nymax <- 10\n\n#Color Options#\nsky_colors <- colorRampPalette(c(\"#94A4C4\", \"#98BFDE\", \"#2C8ED1\", \"#2F9DE2\", \"#2063A5\"))(n)\n\nwater_colors <- colorRampPalette(c(\"#016ADF\", \"#0086E0\", \"#57E2DD\", \"#00A7B2\", \"#1095A6\", \"#016074\",\"#08389E\", \"#001247\"))(n)\n\n\n#Wave Compilation#\nwave_part <- tibble(x = seq(xmin, xmax, length.out = n),\n                   y = sin(x)/10) \n\nwavex <- rep_along(1:n, seq(-10,10, length.out = 100))\nwavey <- seq(0,3, length.out = n)\n\nwave_opts <- list(wavex,\n                  wavey,\n                  water_colors,\n                  1:n)\n#=============================================================================#\n#Data Compilation--------------------------------------------------------------\n#=============================================================================#\nwaves <- pmap_df(wave_opts, ~ wave_part |>\n                   mutate(x = x + jitter(..1, amount = 3),\n                          y = y + jitter(..2, amount = .2),\n                          color = ..3,\n                          group = paste0(\"wave_\",..4)))\n\n#Sky Data#\nsky_slice <- tibble(x = seq(0,20, length.out = n),\n                    y = 2.5)\n\nskyy <- seq(0,8.5, length.out = n)\n\nsky <- map2_df(skyy, sky_colors, ~sky_slice |>\n                 mutate(y = y + .x,\n                        color = .y,\n                        group = \"sky\"))\n\n#Cloud Data#\nx_end <- c(5,11,20)\nybottom <- c(6,6.5,7)\nytop <- c(8.5,8,7.5)\n\ncloud_opts <- list(x_end,ybottom,ytop)\ncloud_box <- pmap_df(cloud_opts, ~tibble(x = seq(0,..1, length.out = 20),\n                                         y = seq(..2, ..3, length.out = 20),\n                                         group = \"cloud\") |>\n                       expand.grid())\n\n#Colors for clouds#\ngrays <- colorRampPalette(c(\"#666666\", \"#ffffff\"))(nrow(cloud_box))\n\n#Overall texture#\ntexture <- tibble(x= seq(xmin,xmax, length.out = 20),\n                  y = seq(ymin,ymax, length.out = 20),\n                  group = \"texture\") |>\n  expand.grid()\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\nwaves |>\n  ggplot(aes(x,y, group = group))+\n  theme_void()+\n  geom_point(data = sky, \n             color = sky$color, \n             position = position_jitter(width = .4, height = .6), \n             size = sample(seq(.1,10, length.out = 25), nrow(sky), replace = TRUE))+\n  geom_path(color = waves$color, \n            linewidth = 2, \n            alpha = .8)+\n  geom_path(color = rev(waves$color), \n            linewidth = .1, \n            alpha = .2)+\n  geom_point(data = cloud_box, \n             size = sample(seq(5,10, length.out = 30), nrow(cloud_box), replace = TRUE), \n             alpha = .01, position = position_jitter(width = 5, height = .1), \n             color = sample(grays)) +\n  geom_point(data = texture, \n             size = sample(seq(10,20, length.out = 50), nrow(texture), replace = TRUE), \n             alpha = .002, color = \"#ffffff\", \n             position = position_jitter(width = .5, height = .4))+\n  coord_cartesian(xlim = c(xmin,xmax),\n                  ylim = c(ymin,ymax),\n                  expand = FALSE)\n\n#To save the output:\n# ggsave(\"images/15.png\",\n#        dev = \"png\",\n#        dpi = 300)"
  },
  {
    "objectID": "submissions/day_16.html",
    "href": "submissions/day_16.html",
    "title": "January 16th - Reflection of A Reflection (Code Not Available)",
    "section": "",
    "text": "Code Not Available/Ready for Open Source"
  },
  {
    "objectID": "submissions/day_18.html",
    "href": "submissions/day_18.html",
    "title": "January 18th - A Grid Inside A Grid Inside A Grid",
    "section": "",
    "text": "Show code\n# Need to r-do - original not save -.-"
  },
  {
    "objectID": "submissions/day_20.html",
    "href": "submissions/day_20.html",
    "title": "January 20th - Art Deco",
    "section": "",
    "text": "{fig-alt=” silhouette of an art deco-styled skyscraper with gold accents. With a gold patterned design and dark red gradient in the background.” fig-align=“center”}"
  },
  {
    "objectID": "submissions/day_25.html",
    "href": "submissions/day_25.html",
    "title": "January 25th - Yayoi Kusama (Code Not Available)",
    "section": "",
    "text": "Code Not Available/Ready for Open Source"
  },
  {
    "objectID": "submissions/day_29.html",
    "href": "submissions/day_29.html",
    "title": "January 29th - Maximailism",
    "section": "",
    "text": "{fig-alt=” A generative image with multiple rainbow finger-like shapes dropping from the top and rising from the bottom on a black and white gradient and rainbow-colored polka dots.” fig-align=“center”}"
  },
  {
    "objectID": "submissions/day_30.html",
    "href": "submissions/day_30.html",
    "title": "January 30th - Minimalism",
    "section": "",
    "text": "```{r}"
  }
]