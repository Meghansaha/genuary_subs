[
  {
    "objectID": "year/submissions/2024/day_01.html",
    "href": "year/submissions/2024/day_01.html",
    "title": "January 1st - Perfect loop / Infinite loop / endless GIFs",
    "section": "",
    "text": "| Next: January 2nd - Made in Ten Minutes &gt;\n\n\n\n\n\n\n\n\nShow code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\n\nlibrary(dplyr) #For data wrangling/manipulation\nlibrary(purrr) #For list wrangling/manipulation/iterations\nlibrary(gganimate) #For gif creation\nlibrary(transformr) #For gif creation assistance\n\n#=============================================================================#\n#Data Set up-------------------------------------------------------------------\n#=============================================================================#\n\n#Angles for shapes#\ntheta &lt;- seq(0,2*pi, length.out = 10000)\n\n#Base level of circles to be manipulated#\ncircles &lt;- tibble(x = cos(theta) * seq(1,100, length.out = 100),\n                  y = sin(theta) * seq(1,100, length.out = 100))\n\n#Color palette to use#\ncolor_base &lt;- c(\"#af3918\", \"#a21152\", \"#822b75\",\"#612884\", \"#154baf\",\n                \"#0b82b9\",\"#277e9d\",\"#488e35\",\"#e3a934\",\"#b2336a\")\n\n#Creating indices to create the pattern of which colors will be presented in a loop#            \nindices &lt;- list(c(1:10),\n                c(2:10,1),\n                c(3:10,1:2),\n                c(4:10,1:3),\n                c(5:10,1:4),\n                c(6:10,1:5),\n                c(7:10,1:6),\n                c(8:10,1:7),\n                c(9:10,1:8),\n                c(10,1:9))\n\n\n#=============================================================================#\n#Final Data Compilation--------------------------------------------------------\n#=============================================================================#\n\ncolor_picks &lt;- map2_df(indices,1:10, ~circles |&gt;\n                        mutate(color = colorRampPalette(color_base[.x])(nrow(circles)),\n                               group = paste0(\"set_\",.y))\n                      )\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\n#!!!May take a while to build/render based on your PC stats!!!#\n\ncolor_picks %&gt;%\n  ggplot(aes(x = x*y,\n             y = x, \n             group = group))+\n  theme_void()+\n  theme(plot.background = element_rect(fill = \"black\", \n                                       linewidth = 20, \n                                       color = \"white\"))+\n  geom_path(linewidth = sample(c(1:4), nrow(color_picks), replace = TRUE),\n             position = position_jitter(width = .1), \n            color = color_picks$color)+\n  coord_polar()+\n  transition_states(\n    group,\n    transition_length = 10,\n    state_length = .1\n  ) +\n  enter_fade() + \n  exit_fade() +\n  ease_aes('bounce-in-out')\n\n#Use -&gt; anim_save(\"image destination and name here.gif\") to save output locally"
  },
  {
    "objectID": "year/submissions/2023/day_30.html",
    "href": "year/submissions/2023/day_30.html",
    "title": "January 30th - Minimalism",
    "section": "",
    "text": "&lt; Prev: January 29th - Maximalism | Next: January 31st - Remix One Of Your Works&gt;\n\n\n\n\n\n\n\n\nShow code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(ggplot2)\n\n#=============================================================================#\n#Data Set-up-------------------------------------------------------------------\n#=============================================================================#\n#Setting angles for the circles#\ntheta &lt;- seq(0,2*pi, length = 100)\n\n#Setting a succession of radi for the circles#\nradi &lt;- seq(0,20, length = 100)\n\n#Setting up for iterations#\nn &lt;- 1:length(radi)\ncolor_pals &lt;- c(\"#000000\", \"#ffffff\")\nfill_pals &lt;- colorRampPalette(c(\"#000000\",\"#070b40\",\"#290740\"))(length(radi))\n\n#Data Compilation#\ncircles &lt;- pmap_df(list(radi,n,fill_pals), ~tibble(x = cos(theta) * .x + 10,\n                                   y = sin(theta) * ..1 + 10,\n                                   group = paste0(\"ring_\",..2),\n                                   color = sample(color_pals, length(theta), replace = TRUE),\n                                   fill = ..3))\n\n#Setting angles for the center circle#\ntheta &lt;- seq(0,2*pi, length = 1000)\n\n#Data for the center circle#\ncenter &lt;- tibble(x = cos(theta) * 5 + 10,\n                 y = sin(theta)* 5 + 10,\n                 color = \"#ffffff\",\n                 group = \"center\")\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\ncircles |&gt;\n  ggplot(aes(x,y, group = group))+\n  theme_void()+\n  theme(plot.background = element_rect(fill = \"#000000\"))+\n  geom_polygon(data = center, \n               fill = \"#ffffff\")+\n  geom_path(color = circles$color,\n            linewidth = .1)+\n  coord_equal(xlim = c(0,20),\n              ylim = c(0,20),\n              expand = FALSE)\n\n#To save the output:\n# ggsave(\"images/30.png\",\n#        dpi = 300,\n#        device = \"png\",\n#        bg = \"transparent\")"
  },
  {
    "objectID": "year/submissions/2023/day_28.html",
    "href": "year/submissions/2023/day_28.html",
    "title": "January 28th - Generative Poetry (Image Made with Canva)",
    "section": "",
    "text": "&lt; Prev: January 27th - In the Style of Hilma Af Klint | Next: January 29th - Maximalism&gt;\n\n\n\n\n\n\nFinal image made manually in Canva\nLyrics sampled with R:\n\n\nShow code\n#Canva Link - https://www.canva.com/design/DAFYukT6P28/P9sHbk3ryvsLitmOT_XEsg/view?utm_content=DAFYukT6P28&utm_campaign=designshare&utm_medium=link&utm_source=publishsharelink&mode=preview\n\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\nlibrary(readr) #Loading in Data\nlibrary(here) #Easier directory movement\n\n#=============================================================================#\n#Data Pull/Generation----------------------------------------------------------\n#=============================================================================#\nlyrics &lt;- read_csv(here(\"submissions\",\"helpers\",\"lyrics.csv\"))\n\nsample(lyrics$lyrics, 6)\n\n#Final Chosen for Canva Design:\npoem &lt;- list(\"And I don't know why, he don't ever give up\",\n             \"Please don't say you need me\",\n             \"I might kill my ex, I still love him, though...\",\n             \"Not the one in Los Angeles\",\n             \"The text gon' be evidence, this text is evidence...\",\n             \"I did it all on no drugs\")\n\n#Song Information:\n#Frank Black - Los Angeles\n#SZA - Kill Bill\n#The Game ft. 50 Cent - Hate It or Love It\n#BabyFace/Ella Mai - Keeps on Fallin'\n#Labrinth - I'm Tired"
  },
  {
    "objectID": "year/submissions/2023/day_26.html",
    "href": "year/submissions/2023/day_26.html",
    "title": "January 26th - My Kid Could Have Made That",
    "section": "",
    "text": "&lt; Prev: January 25th - Yayoi Kusama (Code Not Available) | Next: January 27th - In The Style of Hilma Af Klint&gt;\n\n\n\n\n\n\n\n\nShow code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(ggplot2)\n\n#=============================================================================#\n#Data Set-up-------------------------------------------------------------------\n#=============================================================================#\n\n#Angle set up#\ntheta &lt;- seq(0,2*pi, length = 1000)\n\n#Base scribble#\nsplatbase &lt;- tibble(x = jitter(cos(theta), amount =.02),\n                y = jitter(sin(theta)),amount = .02) |&gt;\n  mutate(x = x *pi*y,\n         y = x*y)\n\n#Sampling and data transformation#\nsplat &lt;- splatbase |&gt;\n  slice_sample(prop= .01) |&gt;\n  mutate(x = x + 3,\n         y = y + 5)\n\n#Overall paper texture#\ntexture &lt;- tibble(x = seq(0,5, length = 100),\n                  y = seq(0,10, length = 100)) |&gt;\n  expand.grid()\n\n#Data for notbook lines#\nbluelines &lt;- tibble(x = 0:5)\n\nbluelines_final &lt;- map2_df(seq(0,9, length.out = 19),c(1.2,rep(.8,18)), ~bluelines |&gt;\n                            mutate(y = .x,\n                                   group = .x,\n                                   size = .y))\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\nsplat |&gt;\n  ggplot(aes(x,y))+\n  theme_void()+\n  theme(plot.background = element_rect(fill = \"white\"))+\n  geom_point(data = texture, \n             size = sample(seq(20,5, length = 30), nrow(texture), replace = TRUE), \n             alpha = .08, \n             color = \"#FCF5F4\", \n             position = position_jitter(width = .5, height = .6))+\n  geom_path(data = bluelines_final, aes(group = group), \n            color = \"#83BEC6\", \n            linewidth = rev(bluelines_final$size))+\n  geom_vline(xintercept = .6, color = \"#BB7867\")+\n  geom_path(linewidth = sample(seq(.1,3, length = 50), nrow(splat), replace = TRUE), \n            color = \"#000f55\", \n            lineend = \"round\") +\n  coord_cartesian(xlim = c(0,5), \n                  ylim = c(0,10),\n                  expand = FALSE)\n\n# ggsave(\"images/26.png\",\n#        dpi = 300,\n#        device = \"png\",\n#        bg = \"transparent\")"
  },
  {
    "objectID": "year/submissions/2023/day_24.html",
    "href": "year/submissions/2023/day_24.html",
    "title": "January 24th - Textile",
    "section": "",
    "text": "&lt; Prev: January 23rd - More Moiré | Next: January 25th - Yayoi Kusama (Code Not Available)&gt;\n\n\n\n\n\n\n\n\nShow code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(ggplot2)\n\n#=============================================================================#\n#Data Set-up-------------------------------------------------------------------\n#=============================================================================#\n\n#Number of strips#\nn = 10\n\n#Horizontal Strips#\ncanvas &lt;- tibble(x = c(seq(0,1, length = 100),\n                       rep(1,100),\n                       seq(1,0, length = 100),\n                       rep(0,100)),\n                 y = c(rep(0,100),\n                       seq(0,10, length = 100),\n                       rep(10, 100),\n                       seq(10,0, length = 100)))\n\n#Vertical Strips#\ncanvas2 &lt;- tibble(y = c(seq(0,1, length = 100),\n                       rep(1,100),\n                       seq(1,0, length = 100),\n                       rep(0,100)),\n                 x = c(rep(0,100),\n                       seq(0,11, length = 100),\n                       rep(11, 100),\n                       seq(11,0, length = 100)))\n\n#Scale transformations\ntrans &lt;- seq(0,10, length = n)\ntrans2 &lt;- seq(0,9, length = n)\n\n#Color options#\ncolor_pal &lt;- colorRampPalette(sort(c(\"#ba3834\",\"#731b18\",\"#6a6a2a\",\"#3d3d12\",\"#634d41\",\"#9e7057\")))(n)\nborder_pal &lt;- map_chr(color_pal, ~colorRampPalette(c(.x, \"#000000\"))(10)[4])\n\n#Iteration Options#\ncube_opts &lt;- list(trans, color_pal, border_pal)\ncube_opts2 &lt;- list(trans2, color_pal, border_pal)\n\n#Strips data compilation#\ncubes &lt;- pmap_df(cube_opts, ~canvas |&gt;\n                  mutate(x = x +..1,\n                         fill = ..2,\n                         color = ..3,\n                         group = ..1))\n\nverts &lt;- pmap_df(cube_opts2, ~canvas2 |&gt;\n                   mutate(y = y +..1,\n                          fill = ..2,\n                          color = ..3,\n                          group = ..1))\n\n#Overall texture data#\ntexture &lt;- tibble(x = -1,\n                  xend = 12,\n                  y = seq(-2,12, length = 100),\n                  yend = y,\n                  color = colorRampPalette(c(\"#EEC373\",\"#333333\",\"#EEC373\",\"#333333\",\"#EEC373\"))(100))\n\ntexture2 &lt;- tibble(y = -2,\n                  yend = 12,\n                  x = seq(-1,12, length = 100),\n                  xend = x,\n                  color = colorRampPalette(c(\"#EEC373\",\"#333333\",\"#EEC373\",\"#333333\",\"#EEC373\"))(100))\n\ntexture3 &lt;- tibble(x = seq(-1,12, length = 50),\n                   y = seq(-2,12, length = 50)) |&gt;\n  expand.grid()\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\ncubes |&gt;\n  ggplot(aes(x,y, group = group))+\n  theme_void()+\n  theme(plot.background = element_rect(fill = \"#EEC373\"))+\n  geom_polygon(position = position_jitter(width = .09), \n               color = cubes$color, \n               fill = cubes$fill, \n               linewidth = .1)+\n  geom_segment(data = texture, aes(x,y, xend = xend, yend = yend), \n               inherit.aes = FALSE, \n               color = texture$color, \n               alpha = .1, \n               linewidth = 20)+\n  geom_polygon(position = position_jitter(width = .09), \n               color = cubes$color, \n               fill = cubes$fill, \n               linewidth = .1, \n               alpha = .9)+\n  geom_segment(data = texture2, aes(x,y, xend = xend, yend = yend), \n               inherit.aes = FALSE, \n               color = texture2$color, \n               alpha = .1, \n               linewidth = 20)+\n  geom_polygon(position = position_jitter(width = .09), \n               color = cubes$color, \n               fill = cubes$fill, \n               linewidth = .1, \n               alpha = .9)+\n  geom_polygon(position = position_jitter(width = .09), \n               color = cubes$color, \n               fill = cubes$fill, \n               linewidth = .1, \n               alpha = .4)+\n  geom_polygon(data = verts, \n               position = position_jitter(width = .09), \n               color = verts$color, \n               fill = verts$fill, \n               linewidth = .1, \n               alpha = .4)+\n  geom_path(data = texture3, aes(x,y, group = 1), \n            linewidth = sample(seq(1,10, length = 50), nrow(texture3), replace = TRUE), \n            color = \"#EEC373\", \n            alpha = .05, \n            position = position_jitter(width = .05, height = .03))+\n  coord_equal(expand = FALSE, \n                  xlim = c(-1,12), \n                  ylim = c(-1,11))\n\n# ggsave(\"images/24.png\",\n#        dpi = 300,\n#        device = \"png\",\n#        bg = \"transparent\")"
  },
  {
    "objectID": "year/submissions/2023/day_22.html",
    "href": "year/submissions/2023/day_22.html",
    "title": "January 22nd - Shadows",
    "section": "",
    "text": "&lt; Prev: January 21st - Persian Rug | Next: January 23rd - More Moiré&gt;\n\n\n\n\n\n\n\n\nShow code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(ggplot2)\n\n#=============================================================================#\n#Data Set-up-------------------------------------------------------------------\n#=============================================================================#\n\n#Number of zig zags#\nn = 200\n\n#Page Limits#\nxmin = 0\nxmax = 100\nymin = 0\nymax = 100\n\n#Zig Zag data#\nzig_zag &lt;- tibble(x = c(0,1,1.5,2,2.5,3,3.5),\n                  y = c(0,.5,0,.5,0,.5,0),\n                  group = \"zigzag\")\n\n#Zig Zag rotatations\nrotates &lt;- sample(0:360, n, replace = TRUE)\n\n#Scale transformations\nxtrans &lt;- sample(xmin:xmax, n, replace = TRUE)\nytrans &lt;- sample(ymin:ymax, n, replace = TRUE)\n\n#Shape rotating fx#\nshape_rotator &lt;- function(df, angle = 5){\n  \n  mp = list(\"x\" = (min(df$x)+max(df$x))/2,\n            \"y\" = (min(df$y)+max(df$y))/2)\n  \n  rotated_shape &lt;- df %&gt;%\n    mutate(x2 = (x - mp$x)*cos(angle) - (y - mp$y)*sin(angle) + mp$x, \n           y2 = (x - mp$x)*sin(angle) + (y - mp$y)*cos(angle) + mp$y,\n           x = x2,\n           y = y2) %&gt;%\n    select(-c(x2,y2))\n  \n  rotated_shape\n  \n}\n\n#Zig zag color choices#\nzig_colors &lt;- colorRampPalette(c(\"#FD77AD\", \"#791E9A\", \"#00E700\", \n                                 \"#03B5C4\", \"#ffffff\", \"#D45A49\"))(n)\n\n#Zig zag options#\nzig_opts &lt;- list(xtrans,\n                 ytrans,\n                 rotates,\n                 1:n,\n                 zig_colors)\n\n#Zig zag data compilation#\nzigs &lt;- pmap_df(zig_opts, ~shape_rotator(zig_zag |&gt;\n                  mutate(x = x + ..1,\n                         y = y + ..2,\n                         group = paste0(group,..4),\n                         color = ..5),..3)\n                \n                )\n\n#Background color data#\nback &lt;- tibble(x = seq(xmin,xmax, length = 100),\n               xend = x,\n               y = ymin,\n               yend = ymax,\n               color = colorRampPalette(c(\"#FED22B\",\"#4652C9\"))(100))\n\n#Number of random shapes#\nshapen &lt;- 50\n\n#Shape data#\nsquare &lt;- tibble(x = c(0,1,1,0,0),\n                 y = c(0,0,1,1,0),\n                 group = \"square\")\n\ntriangle &lt;- tibble(x = c(0,1,.5,0),\n                   y = c(0,0,1,0),\n                   group = \"triangle\")\n\ncircle &lt;- tibble(x = cos(seq(0,2*pi, length = 100)),\n                 y = sin(seq(0,2*pi, length = 100)),\n                 group = \"circle\")\n\n#randomly sampled angles for shape rotation#\nrotates &lt;- sample(0:360, shapen, replace = TRUE)\n\n#scale transformations#\nxtrans &lt;- sample(xmin:xmax, shapen, replace = TRUE)\nytrans &lt;- sample(ymin:ymax, shapen, replace = TRUE)\nscales &lt;- sample(1:10, shapen, replace = TRUE)\n\n#shape colors#\nshape_colors &lt;- colorRampPalette(c(\"#FD77AD\", \"#791E9A\", \"#00E700\", \"#03B5C4\",\n                                   \"#ffffff\", \"#D45A49\", \"#FFE553\"))(shapen)\n\n#Randomly picked shapes#\nshapes &lt;- sample(list(square,triangle,circle), shapen, replace = TRUE)\n\n#shape options for iterations#\nshape_opts &lt;- list(xtrans,\n                 ytrans,\n                 rotates,\n                 1:shapen,\n                 shape_colors,\n                 shapes,\n                 scales,\n                 sample(c(\"#000000\", \"#ffffff\"), shapen, replace = TRUE))\n\n#Shapes data compilation#\nshapes_df &lt;- pmap_df(shape_opts, ~shape_rotator(..6|&gt;\n                                           mutate(x = x * ..7,\n                                                  y = y * ..7,\n                                                  x = x + ..1,\n                                                  y = y + ..2,\n                                                  group = paste0(group,..4),\n                                                  color = ..5,\n                                                  linecolor = ..8),..3)\n)\n\n#overall texture data#\ntexture &lt;- tibble(expand.grid(x = seq(xmin, xmax, length = 50),\n                              y = seq(ymin, ymax, length = 50)))\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\nzigs |&gt;\n  ggplot(aes(x,y, group = group)) +\n  theme_void()+\n  theme(plot.background = element_rect(fill = \"#FED22B\"))+\n  geom_segment(data = back, aes(x,y, xend = xend, yend = yend), \n               inherit.aes = FALSE, \n               color = back$color, \n               linewidth = 5)+\n  geom_point(data = texture, aes(group = 1), \n             size = sample(seq(12,18, length = 50), nrow(texture), replace = TRUE), \n             alpha = .02, \n             color = \"#4652C9\", \n             position = position_jitter(width = .3, height = .2))+\n  geom_path(aes(x = x - .1, y = y - .2), \n            color = \"#000000\", \n            linewidth = 1)+\n  geom_path(color = zigs$color, \n            linewidth = 1)+\n  geom_polygon(data = shapes_df, aes(x = x -.1, y = y -.5), \n               fill = \"#000000\", \n               color = \"#000000\")+\n  geom_polygon(data = shapes_df, \n               fill = shapes_df$color)+\n  geom_path(data = shapes_df, aes(x = x - .7, y = y + .9),\n            color = shapes_df$linecolor, \n            linetype = 3)+\n  coord_equal(expand = FALSE,\n              ylim = c(ymin, ymax), \n              xlim = c(xmin,xmax))\n\n#To save the output:\n# ggsave(\"images/22.png\",\n#        dpi = 300,\n#        device = \"png\",\n#        bg = \"transparent\")"
  },
  {
    "objectID": "year/submissions/2023/day_20.html",
    "href": "year/submissions/2023/day_20.html",
    "title": "January 20th - Art Deco",
    "section": "",
    "text": "&lt; Prev: January 19th - Black and White | Next: January 21st - Persian Rug&gt;\n\n\n\n\n\n\n\n\nShow code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\nlibrary(dplyr) #For data wrangling\nlibrary(purrr) #For iterations\nlibrary(ggplot2) #For plotting\n\n#=============================================================================#\n#Data Set-up-------------------------------------------------------------------\n#=============================================================================#\n\n#Building Base Data#\nbase &lt;- tibble(x = c(1.5,3,3,1.5,1.5,\n                     3,5,5,3,3,\n                     5,7,7,5,5,\n                     7,8.5,8.5,7,7),\n               y = c(0,0,3,3,0,\n                     0,0,4.5,4.5,0,\n                     0,0,4.5,4.5,0,\n                     0,0,3,3,0),\n               group = c(rep(\"base1\",5),\n                         rep(\"base_2\",5),\n                         rep(\"base_3\",5),\n                         rep(\"base_4\",5)))\n\n#Windows data#\nwindows &lt;- tibble(x = seq(1.8,8.1, length =9 ),\n                  xend = x,\n                  y = .1,\n                  yend = if_else(x &gt; 3 & x &lt; 7, 4.4, 2.9))\n\n#Focal Center data#\nfocal &lt;- tibble(x = c(3.75,5.75,5.75,seq(5.75,3.75, length = 100),3.75),\n                y = c(0,0,10,(sin(seq(0,pi, length.out = 100))/2) +10,0)) |&gt;\n  mutate(x = x + .2)\n\n#Focal Windows Data#\nfocal_windows &lt;- tibble(x = seq(4.2,5.7, length =8),\n                        y = seq(.6,9, length = 8)) |&gt;\n  expand.grid() \n\n#Pointy top data#\ntop &lt;- tibble(x = c(4.7,5.3,5,4.7),\n              y = c(10,10,15,10)) |&gt;\n  mutate(x = x -.05)\n\n#Background half circle pattern data#\nhalf_circle &lt;- tibble(x = c(cos(seq(0,pi, length = 100)),1),\n                      y = c(sin(seq(0,pi, length = 100)),0),\n                      group = 1) \n\n\n#Background iterations#\nhalf_circle2 &lt;- map_df(seq(0,3, length.out = 5), ~half_circle |&gt;\n                        mutate(x = x * .x,\n                               y = y * .x,\n                               group = paste0(\"group_\",.x)))\n\n\nhc_row &lt;- map_df(c(0,3,6,9), ~half_circle2 |&gt;\n                   mutate(x = x + .x,\n                          group = paste0(group,.x)))\n\nytrans &lt;- seq(0,15, length = 6)\n\nhc_grid &lt;-  map_df(ytrans, ~hc_row|&gt;\n                 mutate(y = (y + .x) - 1,\n                        group = paste0(group,.x)))\n\n#Overall background texture#\ntexture &lt;- tibble(x = seq(0,10, length = 50),\n                  y = seq(0,15, length = 50)) |&gt;\n  expand.grid()\n\n#background color data#\nback &lt;- tibble(x = 0,\n               xend = 10,\n               y = seq(0,15, length = 500),\n               yend = y,\n               color = colorRampPalette(c(\"#000000\",\"#8B0000\"))(500))\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\nbase |&gt;\n  ggplot(aes(x,y, group = group))+\n  theme_void()+\n  theme(plot.background = element_rect(fill = \"#8B0000\"))+\n  geom_segment(data = back, aes(group = 4, xend = xend, yend = yend), \n               color = back$color)+\n  geom_polygon(data = hc_grid, \n               color = \"#d4af37\", \n               fill = NA, alpha = .2 , \n               aes(group = rev(group)), \n               linewidth = .1)+\n  geom_point(data = texture, aes(group = 1), \n             color = \"#1a1a1a\", \n             size = sample(seq(.1,15, length.out = 55), nrow(texture), replace = TRUE), \n             alpha = .04)+\n  geom_polygon(fill = \"black\")+\n  geom_segment(data = windows, aes(x,y, xend = xend, yend = yend), \n               inherit.aes = FALSE, \n               color = \"#d4af37\", \n               linewidth = 10)+\n  geom_segment(data = windows, aes(x,y, xend = xend, yend = yend), \n               inherit.aes = FALSE, \n               color = \"white\", \n               linewidth = 8)+\n  geom_polygon(data = top, \n               fill = \"black\", \n               group = 1)+\n  geom_polygon(data = focal, \n               fill = \"black\", \n               group = 1)+\n  geom_point(data = focal_windows, aes(group = 1), \n             shape = 22, \n             fill = 'white', \n             color = \"#d4af37\", \n             size = 4)+\n  coord_equal(xlim = c(0,10), \n              ylim = c(0,15), \n              expand = FALSE)\n\n#To save the output:\n# ggsave(\"20.png\",\n#        device = \"png\",\n#        dpi = 300,\n#        bg = \"transparent\")"
  },
  {
    "objectID": "year/submissions/2023/day_18.html",
    "href": "year/submissions/2023/day_18.html",
    "title": "January 18th - Definitely Not A Grid (Code Not Available)",
    "section": "",
    "text": "&lt; Prev: January 17th - A Grid Inside A Grid Inside A Grid | Next: January 19th - Black and White&gt;\n\n\n\n\n\n\nCode Not Available/Needs to be rebuilt."
  },
  {
    "objectID": "year/submissions/2023/day_16.html",
    "href": "year/submissions/2023/day_16.html",
    "title": "January 16th - Reflection of A Reflection (Code Not Available)",
    "section": "",
    "text": "&lt; Prev: January 15th - Sine Waves | Next: January 17th - Grid Inside A Grid Inside A Grid&gt;\n\n\n\n\n\n\nCode Not Available/Ready for Open Source"
  },
  {
    "objectID": "year/submissions/2023/day_14.html",
    "href": "year/submissions/2023/day_14.html",
    "title": "January 14th - Aesemic",
    "section": "",
    "text": "&lt; Prev: January 13th - Something You’ve Always Wanted to Learn | Next: January 15th - Sine Waves&gt;\n\n\n\n\n\n\n\n\nShow code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\nlibrary(dplyr) #Data Wrangling\nlibrary(purrr) #List Manipulation/Iterations\nlibrary(ggplot2) #Plotting\n\n#=============================================================================#\n#Data Set-up-------------------------------------------------------------------\n#=============================================================================#\n\n#Number of circles#\nn = 20\n\n#Setting angles of circle#\ntheta &lt;- seq(0,2*pi, length = 1000)\n\n#Making base circle#\ncircle &lt;- tibble(x = cos(theta),\n                 y = sin(theta))\n\n#Setting options for iterations#\n\n#circle radi#\nradi &lt;- seq(1,50, length = n)\n\n#Groupings#\ngroup_names &lt;- paste0(\"group\", radi)\n\n#Jitter settings#\njitter_trans &lt;- seq(.5,.01, length = n)\n\n#colors for circles#\ncolors &lt;- colorRampPalette(c(\"#EB382A\",\"#000000\",\"#EB382A\",\"#000000\",\"#EB382A\",\"#000000\",\"#EB382A\"))(n)\n\n#Colors for text#\ntext_colors &lt;- colorRampPalette(c(\"#000000\",\"#ffffff\",\"#000000\",\"#ffffff\",\"#000000\",\"#ffffff\",\"#000000\"))(n)\n\n#Accounting for border jitter#\nlast_group &lt;- tail(group_names,1)\n\n#Circle Options#\ncircle_options &lt;- list(radi,\n                       group_names,\n                       jitter_trans,\n                       colors,\n                       text_colors)\n\n#=============================================================================#\n#Data Compilation--------------------------------------------------------------\n#=============================================================================#\n\n#For circles#\ncircles &lt;- pmap_df(circle_options, ~circle |&gt;\n                     mutate(x = x * ..1,\n                            y = y * ..1,\n                            group = ..2) |&gt;\n                     mutate(x = if_else(group == last_group, x, jitter(x, amount = ..3)),\n                            y = if_else(group == last_group, y, jitter(y, amount = ..3)),\n                            fill = ..4,\n                            color = ..5))\n\n#For overall texture#\ntexture &lt;- tibble(x = seq(-51,51, length = 100),\n                  y = x) |&gt; \n  expand.grid()\n\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\ncircles |&gt;\n  ggplot(aes(x,y, group = group))+\n  theme_void()+\n  theme(plot.background = element_rect(fill = \"#E4C8A6\"))+\n  geom_path(data = texture, \n            linewidth = sample(seq(.01,.9, length = 20), nrow(texture), replace = TRUE), \n            aes(group = x), \n            color = \"#845244\", \n            position = position_jitter(width = .002, height = .003),\n            alpha = sample(seq(.01,.7, length = 20), nrow(texture), replace = TRUE))+\n  geom_path(data = texture, \n            linewidth = sample(seq(.01,.9, length = 20), nrow(texture), replace = TRUE), \n            color = \"#845244\", \n            position = position_jitter(width = .002, height = .003),\n            alpha = sample(seq(.01,.7, length = 20), nrow(texture), replace = TRUE), aes(group = y))+\n  geom_path(linewidth = 15, \n            color = circles$fill)+\n  geom_point(data = texture, aes(x,y), \n             inherit.aes = FALSE, \n             size = sample(seq(5,10, length = 20), nrow(texture), replace = TRUE), \n             color = \"#845244\", \n             position = position_jitter(width = .02, height = .03),\n             alpha = sample(seq(.01,.08, length = 20), nrow(texture), replace = TRUE))+\n  geom_path(linewidth = sample(seq(.1, .5, length = 50), nrow(circles), replace = TRUE), \n            position = position_jitter(width = .05, height = .08),\n            color = circles$color)+\n  coord_equal(expand = FALSE)"
  },
  {
    "objectID": "year/submissions/2023/day_12.html",
    "href": "year/submissions/2023/day_12.html",
    "title": "January 12th - Tessellation",
    "section": "",
    "text": "&lt; Prev: January 11th - Suprematism | Next: January 13th - Something You’ve Always Wanted to Learn&gt;\n\n\n\n\n\n\n\n\nShow code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\n\nlibrary(dplyr) #Data Wrangling\nlibrary(purrr) #Iteration work\nlibrary(ggplot2) #Plotting\n\n#=============================================================================#\n#Data Set-up-------------------------------------------------------------------\n#=============================================================================#\n\n#First Set of patterns\nvert1 &lt;- tibble(x = seq(0,1, length.out = 5),\n               xend = x,\n               y =0,\n               yend =1,\n               group = \"vert\")\n\ndiagonal1 &lt;- tibble(x = c(0,0,0,0,.25,.5,.75),\n                   xend = c(.25,.5,.75,1,1,1,1),\n                   y = c(.75, .5, .25, 0, 0,0,0),\n                   yend = c(1,1,1,1,.75,.5,.25)) |&gt;\n  mutate(x = x +1,\n         xend = xend +1,\n         group = \"diagonal_up\")\n\nhoriz1 &lt;- tibble(x = 0,\n                xend = 1, \n                y = seq(0,1, length.out = 5),\n                yend = y) |&gt;\n  mutate(x = x + 2,\n         xend = xend + 2,\n         group = \"horiz\")\n\ndiagonal1a &lt;- tibble(x = c(.75,.5,.2,0,0,0,0),\n                    xend = c(1,1,1,1,.75,.5,.25),\n                    y = c(1,1,1,1,.75,.5,.25),\n                    yend = c(.75,.5,.25,0,0,0,0)) |&gt;\n  mutate(x = x + 3,\n         xend = xend + 3,\n         group = \"diagonal_down\")\n\nvert1a &lt;- vert1 |&gt;\n  mutate(x = x + 4,\n         xend = xend + 4)\n\nrow1_start &lt;- rbind(vert1,diagonal1,horiz1,diagonal1a,vert1a)\nrow1_end &lt;- row1_start |&gt;\n  mutate(x = x + 5,\n         xend = xend + 5)\n\nrow1 &lt;- rbind(row1_start, row1_end)\n\n#Second set of patterns#\n\ndiagonal2 &lt;- diagonal1 |&gt;\n  mutate(x = x - 1,\n         xend = xend - 1)\n\nvert2 &lt;- vert1 |&gt;\n  mutate(x = x + 1,\n         xend = xend + 1)\n\ndiagonal2a &lt;- diagonal1a |&gt;\n  mutate(x = x + 1,\n         xend = xend + 1)\n\nvert2a &lt;- vert1 |&gt;\n  mutate(x = x + 3,\n         xend = xend + 3)\n\n\nrow2_start &lt;- rbind(diagonal2,vert2,horiz1,vert2a,diagonal2a)\nrow2_end &lt;- row2_start |&gt;\n  mutate(x = x + 5,\n         xend = xend + 5)\n\nrow2 &lt;- rbind(row2_start, row2_end)\n\nrow2 &lt;- row2 |&gt;\n  mutate(y = y + 1,\n         yend = yend + 1)\n\n#Grid Lines#\ngridlines1 &lt;- tibble(x = seq(0,10, length = 11),\n                    xend = x,\n                    y = 0,\n                    yend = 10)\n\ngridlines2 &lt;- tibble(x = 0,\n                     xend = 10,\n                     y = seq(0,10, length = 11),\n                     yend = y)\n\n#Final binding of patterns#\nchunk &lt;- rbind(row1, row2)\n\n#Y scale transformations#\nytrans &lt;- 0:4\n\n# Final pattern data#\nfinal_data &lt;- map_df(ytrans, ~chunk |&gt;\n                       mutate(y = y + 2*.x,\n                              yend = yend + 2*.x))\n\n#Background colors#\nbackground &lt;- tibble(x = seq(0,10, length.out = 1000),\n                     xend = x,\n                     y = 0,\n                     yend = 10,\n                     color = colorRampPalette(c(\"#000000\",\"#af3918\",\"#000000\", \"#a21152\",\"#000000\", \n                                                \"#822b75\",\"#000000\",\"#612884\",\"#000000\",\"#154baf\",\n                                                \"#000000\",\"#0b82b9\",\"#000000\", \"#277e9d\",\"#000000\",\n                                                \"#488e35\",\"#000000\",\"#e3a934\",\"#000000\",\"#b2336a\",\"#000000\"))(1000),\n                    group = \"back\")\n\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\nfinal_data |&gt;\n  ggplot(aes(x,y, xend = xend, yend = yend, group = group))+\n  theme_void()+\n  theme(plot.background = element_rect(fill = \"#277e9d\"))+\n  geom_segment(data = background, color = background$color, \n               linewidth = 1)+\n  geom_segment(color = \"black\", \n               linewidth = 2)+\n  geom_segment(color = \"white\", \n               linewidth = .5, \n               linetype = 2)+\n  geom_segment(data = gridlines1, aes(group = \"grid1\"), \n               linewidth = 4)+\n  geom_segment(data = gridlines2, aes(group = \"grid2\"), \n               linewidth = 4)+\n  coord_equal(xlim = c(0,10), \n              ylim = c(0,10), \n              expand = FALSE)"
  },
  {
    "objectID": "year/submissions/2023/day_10.html",
    "href": "year/submissions/2023/day_10.html",
    "title": "January 10th - Generative Music",
    "section": "",
    "text": "&lt; Prev: January 9th - Plants | Next: January 11th - Suprematism&gt;\n\n\n\n\n\n\n\n\nShow code\n#=============================================================================#\n#Library Load-In---------------------------------------------------------------\n#=============================================================================#\nlibrary(dplyr) #Data wrangling\nlibrary(purrr) #List Manipulation/iteration work\nlibrary(stringr) #String Manipulation\nlibrary(ggplot2) #For plotting\nlibrary(showtext) #For Custom Fonts\n\n#=============================================================================#\n#Font Load-in------------------------------------------------------------------\n#=============================================================================#\n\nfont_add(family = \"tequila\", regular = \"submissions/helpers/tequila/TEQUILA_.TTF\")\nshowtext_auto()\n\n#=============================================================================#\n#Data Set up-------------------------------------------------------------------\n#=============================================================================#\n\n#Every word in the song separated by comma#\nlyrics &lt;- \"I'm,on,my,time,with,everyone,I,have,very,bad,posture,Sit,and,drink,Pennyroyal,Tea,Distill,the,life,that's,inside,of,me,Sit,and,drink,Pennyroyal,Tea,I'm,anemic,royalty,Give,me,a,Leonard,Cohen,afterworld,So,I,can,sigh,eternally,I'm,so,tired,I,can't,sleep,I'm,a,liar,and,a,thief,Sit,and,drink,Pennyroyal,Tea,I'm,anemic,royalty,I'm,on,warm,milk,and,laxatives,Cherry-flavored,antacids\"\n\n#A base chord box#\nchord_box &lt;- tibble(x = c(rep(1,6), 1:6),\n                    y = c(1:6, rep(1,6)),\n                    xend = c(rep(6,6), 1:6),\n                    yend = c(1:6, rep(6,6)),\n                    group = c(rep(\"vert\",6), rep(\"horiz\",6)),\n                    size = c(rep(1,5),3,rep(1,6)))\n\n#Creating the set of chord boxes#\nboxes &lt;- map2_df(c(0,rep(7,6)), 0:6, ~chord_box|&gt;\n                   mutate(x = x + (.x * .y),\n                          xend = xend + (.x * .y)))\n\n#Manual calcuation of the chord positions#\nchord_points &lt;- tibble(x = c(3,4,5,\n                             1,2,6,\n                             2,3,6,\n                             4,5,6,\n                             2,3,\n                             3,\n                             3,4),\n                       y = c(4.5,4.5,5.5,\n                             3.5,4.5,3.5,\n                             3.5,4.5,5.5,\n                             4.5,3.5,4.5,\n                             5.5,3.5,\n                             4.5,\n                             4.5,4.5),\n                       group = c(rep(\"Am\",3),\n                                 rep(\"G\",3),\n                                 rep(\"C\",3),\n                                 rep(\"D\",3),\n                                 rep(\"Bb5\",2),\n                                 rep(\"A5\",1),\n                                 rep(\"Asus2\",2))) |&gt;\n  mutate(x = x + c(rep(0,3),\n                   rep(7*1,3),\n                   rep(7*2,3),\n                   rep(7*3,3),\n                   rep(7*4,2),\n                   rep(7*5,1),\n                   rep(7*6,2)))\n\n#Adding the chord titles#\nchord_annotations &lt;- tibble(chords = c(\"Am\",\"G\",\"C\",\"D\",\"Bb5\",\"A5\",\"Asus2\"),\n                            x = c(3.5 + 7*0:6),\n                            y = 8.3)\n\n#Adding the muted string symbols#\nxes &lt;- tibble(text = \"X\",\n              x = c(1,\n                    1 + 14,\n                    1 + 21, 2 + 21,\n                    1 + 28, 4 + 28, 5 + 28, 6 + 28,\n                    1 + 35, 4 + 35, 5 + 35, 6 + 35,\n                    1 + 42),\n              y = 6.7)\n\n#Adding some overall texture#\ntexture &lt;- tibble(expand.grid(y = -10:20,\n                              x = 0:48))\n\n#Creating a data set for the splt lyrics#\nwords &lt;- tibble(text = unlist(strsplit(lyrics,\",\"))) |&gt;\n  mutate(x = sample(seq(0,48, length.out = 100), 70),\n         y = c(sample(seq(-10,5, length.out = 100), 35),\n               sample(seq(11,20, length.out = 100), 35)))\n\nboxes |&gt;\n  ggplot(aes(x,y, xend = xend, yend = yend))+\n  theme_void()+\n  theme(plot.background = element_rect(fill = \"#FFFCE9\"))+\n  geom_point(data = texture, aes(x,y), \n             inherit.aes = FALSE, \n             size = sample(1:50, nrow(texture), replace = TRUE), \n             alpha = .04, color = \"#F2EDC5\", \n             position = position_jitter(width = .9, height = .5))+\n  geom_text(data = words, aes(x,y, label = text), \n            inherit.aes = FALSE, \n            family = \"tequila\", \n            size = sample(5:20, nrow(words), replace = TRUE), \n            color = sample(colorRampPalette(c(\"#000000\",\"#751109\"))(nrow(words))), \n            angle = sample(0:180, nrow(words)))+\n  geom_path(data = texture, aes(x,y), \n            inherit.aes = FALSE,  \n            alpha = .04, \n            linewidth = 10, color = \"#751109\", \n            position = position_jitter(width = .9, height = .5))+\n  geom_segment(linewidth = boxes$size) +\n  geom_point(data = chord_points, aes(x,y), \n             size = 3, \n             inherit.aes = FALSE, \n             shape = 21, \n             color = \"#000000\", \n             fill = \"#751109\")+\n  geom_text(data = chord_annotations, aes(x,y, label = chords), \n            inherit.aes = FALSE, \n            family = \"tequila\", \n            size = 12, \n            color = \"#751109\", \n            fontface = \"bold\")+\n  geom_text(data = xes, aes(x,y, label = text), \n            inherit.aes = FALSE, \n            family = \"tequila\", \n            size = 6 )+\n  coord_equal(ylim = c(-10,20), \n              xlim = c(0,48))"
  },
  {
    "objectID": "year/submissions/2023/day_08.html",
    "href": "year/submissions/2023/day_08.html",
    "title": "January 8th - Signed Distance Functions (Code Not Available)",
    "section": "",
    "text": "&lt; Prev: January 7th - Sample a color palette from your favorite movie/album cover | Next: January 9th - Plants&gt;\n\n\n\n\n\n\nCode Not Available/Ready for Open Source"
  },
  {
    "objectID": "year/submissions/2023/day_06.html",
    "href": "year/submissions/2023/day_06.html",
    "title": "January 6th - Steal Like an Artist",
    "section": "",
    "text": "&lt; Prev: January 5th - Debug View | Next: January 7th - Sample a color palette from your favorite movie/album cover&gt;\n\n\n\n\n\n\n\n\nShow code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\n\nlibrary(dplyr) #Data wrangling\nlibrary(showtext) #Custom fonts\nlibrary(ggplot2) #for plotting\n\n#=============================================================================#\n#Font load-in------------------------------------------------------------------\n#=============================================================================#\n\nfont_add_google(\"Neucha\")\nshowtext_auto()\n\n#=============================================================================#\n#Data Set up-------------------------------------------------------------------\n#=============================================================================#\n\n#Angles for making a circle#\ntheta &lt;- seq(0,2*pi, length.out = 100)\n\n#Setting color options#\ngreen &lt;- \"#A1BD56\"\nred &lt;- \"#D12929\"\ndark_orange &lt;- \"#D35421\"\nlight_orange &lt;- \"#EDAF74\"\nmedium_orange &lt;- \"#EB822F\"\npink &lt;- \"#ECAFCE\"\nlight_pink &lt;- \"#F1D2E1\"\nmedium_red &lt;- \"#D94253\"\nblack &lt;- \"#000000\"\nbackground &lt;- \"#F0F1EC\"\n\n#Making a standard unit circle#\nunit_circle &lt;- tibble(x = cos(theta),\n                    y = sin(theta))\n\n#Manually Made Circles)\ngreen_circle &lt;- unit_circle |&gt;\nmutate(x = x - 1,\n       y = y + 1,\n       group = \"green\")\n\nred_circle &lt;- unit_circle |&gt;\nmutate(x = x - 1,\n       y = y - 1.5,\n       group = \"red\")\n\npink_circle &lt;- unit_circle |&gt;\nmutate(x = x + .2,\n       y = y,\n       group = \"pink\")\n\nlight_pink_circle &lt;- unit_circle |&gt;\nmutate(x = x + 2,\n       y = y,\n       group = \"lightpink\")\n\nmed_red_circle &lt;- unit_circle |&gt;\nmutate(x = x + 3.5,\n       y = y + 1,\n       group = \"med_red\")\n\nblack_circle &lt;- unit_circle |&gt;\nmutate(x = x + 3.3,\n       y = y -1.5 ,\n       group = \"black_red\")\n\n#Text Objects#\nheadline &lt;- tibble(x = 1.23,\n                 y = 1.2,\n                 label = \"what looks good today\",\n                 group = \"text\")\n\nbyline &lt;- tibble(x = -.4,\n               y = .2,\n               label = \"may not look good tomorrow\",\n               group = \"text\")\n\npink_text &lt;- tibble(x = 2.01,\n                  y = .3,\n                  label = \"what lc\",\n                  group = \"text\")\n\npinkbyline &lt;- tibble(x = 2.1,\n                   y = -.8,\n                   label = \"may not look\",\n                   group = \"text\")\n\nred_text &lt;- tibble(x = -1.3,\n                 y = -1.5,\n                 label = \"what lc\",\n                 group = \"text\")\n\nredbyline &lt;- tibble(x = -.2,\n                  y = -1.5,\n                  label = \"may not look\",\n                  group = \"text\")\n\nblacktext &lt;- tibble(x = 3,\n                  y = -1.5,\n                  label = \"NOW'S THE TIME\",\n                  group = \"text\")\n\n#Texture for the overall image#\ntexture &lt;- tibble(expand.grid(x = seq(-1.7,4.2, length.out = 100),\n                            y = seq(-3,2, length.out = 100),\n                            group = \"texture\"))\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\ngreen_circle |&gt;\n  ggplot(aes(x,y, group = group))+\n  theme_void()+\n  theme(plot.background = element_rect(fill = background))+\n  geom_polygon(data = red_circle,\n               fill = red, \n               color = light_orange, \n               linewidth = 5)+\n  geom_polygon(data = pink_circle, \n               fill = pink, \n               color = pink, \n               linewidth = 5, \n               position = position_jitter(width = .005, height = .005))+\n  geom_polygon(data = med_red_circle, \n               fill = medium_red, \n               color = medium_red,\n               linewidth = 5, \n               position = position_jitter(width = .005, height = .005))+\n  geom_polygon(data = light_pink_circle, \n               fill = light_pink, \n               color = medium_orange, \n               linewidth = 5)+\n  geom_polygon(fill = green, \n               color = dark_orange, \n               linewidth = 5, \n               position = position_jitter(width = .005, height = .005))+\n  geom_polygon(data = black_circle, \n               fill = black, \n               color = black, \n               linewidth = 5, \n               position = position_jitter(width = .005, height = .005))+\n  geom_text(data = headline, aes(x,y,label = label), \n            size = 37.5, \n            family = \"Neucha\")+\n  geom_text(data = byline, aes(x,y,label = label), \n            size = 8, \n            family = \"Neucha\")+\n  geom_text(data = pink_text, aes(x,y,label = label), \n            size = 34.2, \n            family = \"Neucha\", \n            color = medium_orange)+\n  geom_text(data = pinkbyline, aes(x,y,label = label), \n            size = 8, \n            family = \"Neucha\", \n            color = medium_orange)+\n  geom_text(data = red_text, aes(x,y,label = label), \n            size = 34.2, \n            family = \"Neucha\", \n            color = light_orange, \n            angle = 90)+\n  geom_text(data = redbyline, aes(x,y,label = label), \n            size = 8, \n            family = \"Neucha\", \n            color = light_orange, \n            angle = 90)+\n  geom_text(data = blacktext, aes(x,y,label = label), \n            size = 9, \n            family = \"Neucha\", \n            color = \"white\")+\n  geom_path(data = texture, color = colorRampPalette(c(background,\"#C48E8E\"))(nrow(texture)), \n            linewidth = sample(seq(.1,3, length.out = 20), nrow(texture), replace = TRUE), \n            alpha = .05, \n            position = position_jitter(width = .005, height = .005))+\n  coord_equal(xlim = c(-1.7,4.2), \n              ylim = c(-3,2), \n             expand = FALSE)\n\n#To save the output:\n# ggsave(\"images/06.png\",\n#        dpi = 300,\n#        device = \"png\")"
  },
  {
    "objectID": "year/submissions/2023/day_04.html",
    "href": "year/submissions/2023/day_04.html",
    "title": "January 4th - Intersections",
    "section": "",
    "text": "&lt; Prev: January 3rd - Glitch Art | Next: January 5th - Debug View &gt;\n\n\n\n\n\n\n\n\nShow code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\nlibrary(dplyr)\nlibrary(ggplot2)\n\n#=============================================================================#\n#Data Creation-----------------------------------------------------------------\n#=============================================================================#\n\n#Picking out colors to use#\nburberry_colors &lt;- c(\"#A70100\", \"#513819\", \"#956226\", \"#747674\", \"#0D100E\", \"#ffffff\")\n\n#Background color\nback_color &lt;- \"#B8A081\"\n  \n#Vertical Lines#\nred_lines &lt;- tibble(x = seq(0,10, length = 10),\n                    xend = x,\n                    y = 0,\n                    yend = 10,\n                    group = \"redlines\")\n\n#Horizontal Lines#\ntan_lines &lt;- tibble(y = seq(2,8, length = 5),\n                    yend = y,\n                    x = 0,\n                    xend = 10,\n                    group = \"tan lines\")\n\n#Background waves#\ntexture &lt;- tibble(x = seq(0,10, length = 100), \n                  y = x) |&gt;\n  expand.grid()\n\n#Red Fog#\ntextbar &lt;- tibble(x = 0,\n                  xend = 10,\n                  y = seq(10,0, length = 1000),\n                  yend = y,\n                  group = \"textbar\",\n                  color = colorRampPalette(c(\"#A70100\", \"#ffffff\"))(1000))\n\n\nred_lines |&gt;\n  ggplot(aes(x,y, group = group))+\n  theme_void()+\n  theme(plot.background = element_rect(fill = back_color))+\n  geom_path(data = texture, aes( group = x), \n            linewidth= 15, \n            color = \"#000000\", \n            alpha = 1, position = position_jitter(width = .05))+\n  geom_path(data = texture, aes( group = x), \n            linewidth= 10, \n            color = \"#555555\", \n            alpha = .3, \n            position = position_jitter(width = .05))+\n  geom_path(data = texture, aes( group = x), \n            linewidth= 10, \n            color = \"#ffffff\", \n            alpha = .1, \n            position = position_jitter(width = .05))+\n  geom_segment(aes(x = (x +.1), xend = (xend + .1), yend = yend), \n               color = \"#1a1a1a\", \n               linewidth = 5)+\n  geom_segment(aes(xend = xend, yend = yend), \n               color = burberry_colors[1], \n               alpha = .8, \n               linewidth = 5)+\n  geom_segment(data = tan_lines, aes(y = (y -.1), xend = xend, yend = yend - .1), \n             color = \"#1a1a1a\", \n             linewidth = 5)+\n  geom_segment(data = tan_lines, aes(xend = xend, yend = yend), \n               color = burberry_colors[2], \n               alpha = .8, \n               linewidth = 5)+\n  geom_segment(data = textbar, aes(xend = xend, yend = yend), \n               color = textbar$color, \n               alpha = c(seq(.1,0, length = 500),rep(0,500)), \n               linewidth = 5)+\n  coord_cartesian(xlim = c(0,10), ylim = c(0,10), expand = FALSE)"
  },
  {
    "objectID": "year/submissions/2023/day_02.html",
    "href": "year/submissions/2023/day_02.html",
    "title": "January 2nd - Made in 10 Minutes",
    "section": "",
    "text": "&lt; Prev: January 1st - Infinite Loop | Next: January 3rd - Glitch Art &gt;\n\n\n\n\n\n\n\n\nShow code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\nlibrary(dplyr) #For data wrangling/manipulation\nlibrary(purrr) #For list wrangling/manipulation/iterations\nlibrary(ggplot2) #For plotting\n\n#=============================================================================#\n#Data Set-up-------------------------------------------------------------------\n#=============================================================================#\n\n#Angles in a circle#\ntheta &lt;- seq(0,2*pi, length.out = 100)\n\n#Creating a basic unit circle#\nunit_circle &lt;- tibble(x = cos(theta),\n                      y = sin(theta))\n\n#Picking out a color palette#\ncolor_pal &lt;- c(\"#FFD39A\", \"#319DA0\", \"#781C68\", \"#FFF5E1\")\n\n#Setting background color#\nbackground &lt;- \"#fff5e1\"\n\n#Setting the petal amount (n)#\nn = 20\n\n#Creating iterations\nn_iters &lt;- 1:n\n\n#Setting x and y transformations#\ntrans &lt;- seq(0,.5, length = n)\n\n#Setting colors#\nfills &lt;- colorRampPalette(color_pal)(n)\n\n#Setting transparencies#\nalphas &lt;- seq(1,.2, length = n)\n\n#Setting List options#\nlist_opts &lt;- list(trans,\n                  fills,\n                  alphas)\n\n#=============================================================================#\n#Data Compilation--------------------------------------------------------------\n#=============================================================================#\nbase &lt;- pmap_df(list_opts, ~unit_circle|&gt;\n                  mutate(x = x * ..1,\n                         y = y * ..1,\n                         group = paste0(\"circle\",..1),\n                         fill = ..2,\n                         alpha = ..3\n                  )\n)\n\n\nfinal &lt;- map_df(n_iters, ~base|&gt;\n                  mutate(x = x + .x,\n                         group = paste0(\"circle\",.x)\n                  )\n)\n\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\nfinal |&gt;\n  ggplot(aes(x,y, group = group))+\n  theme_void()+\n  theme(plot.background = element_rect(fill = background))+\n  geom_point(color = final$fill,position = position_jitter(width = .01, height = .02),\n             alpha = final$alpha,\n             fill = background,\n             shape = 21,\n             stroke = 3)+\n  coord_polar()\n\n#Use to save output:\n\n# ggsave(\"images/gen_2.png\",\n#        dpi = 300,\n#        device = \"png\",\n#        bg = \"transparent\",\n#        height = 10,\n#        width = 10)"
  },
  {
    "objectID": "year/2024.html",
    "href": "year/2024.html",
    "title": "2024 Genuary Submissions",
    "section": "",
    "text": "Coming Soon!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 1st - Perfect loop / Infinite loop / endless GIFs\n\n\n\n\n\n\n\n\n\nJan 1, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Genuary Submissions",
    "section": "",
    "text": "2023 Genuary Submissions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Genuary is an annual daily challenge for generative artists in the month of January. This site holds my Genuary submissions. Currently, only the year 2023 is listed. You can view my submissions here."
  },
  {
    "objectID": "FAQ.html",
    "href": "FAQ.html",
    "title": "FAQ",
    "section": "",
    "text": "Q: What is Genuary?\nA: It’s a daily art challenge. Read about it here\n\nQ: How did you learn to do generative art in R?\nA: Just like how I taught myself how to do Data Science, I kinda taught myself how to do generative art too. Just trial and error and practice.\n\nQ: Can I fork your art to learn/practice my own art?\nA: Absolutely!\n\nQ: Can I use your code for trademark purposes?\nA: Please don’t; It’s licensed :) but thank you for asking!\n\nQ: Why is the code for some days missing?\nA: Because I’m terrible at keeping organized when crunched for time. I just had a baby and I’m shocked that I even completed the entire month AND that more scripts didn’t get accidentally deleted. Some functions I’m also working on for a package so not ready to share yet. I don’t have any plans to update the missing days though!\n\nQ: Are you selling your art at some point?\nA: Yes I am. Just need to adjust to having a baby. Expect a store announcement at some point.\n\nQ: Where can I learn how to do generative art in R?\nA: I have several meetups/talks and blog posts talking about this and there are others that have great resources:\n\nPresentation Recording: “It’s All About Perspective: Making A Case for Generative Art.”\nPresentation Slides: “It’s All About Perspective: Making A Case for Generative Art.”\nPresentation Recording: “Collages and Patterns: Making aRt in R”.\n\n\n\nPresentation Slides: “Collages and Patterns: Making aRt in R”.\nPresentation Recording: “Collages and Patterns: Making aRt in R”\nBlog Post: “Thinking Outside the Grid - A”bare bones” intro to Rtistry concepts in R using ggplot.”\nPresentation Recording: “Intro to Rtistry Using ggplot2 in R”\nPresentation Slides: “Intro to Rtistry Using ggplot2 in R”\nExample Code: “Bars Example” - (An example on using Purrr functions for Rtistry)\nRtistry Presentation Repository: “Functions in Rtistry”\n“Anatomy of Generative Art” Talk and Repository- Ijemaka Anyene\n“Art From Code” Workshop Materials - Danielle Navarro\n\n\nQ: My question isn’t here\nA: No worries, just e-mail me:"
  },
  {
    "objectID": "year/2023.html",
    "href": "year/2023.html",
    "title": "2023 Genuary Submissions",
    "section": "",
    "text": "January 1st - Perfect loop / Infinite loop / endless GIFs\n\n\n\n\n\n\n\n\n\nJan 1, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 2nd - Made in 10 Minutes\n\n\n\n\n\n\n\n\n\nJan 2, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 3rd - Glitch Art\n\n\n\n\n\n\n\n\n\nJan 3, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 4th - Intersections\n\n\n\n\n\n\n\n\n\nJan 4, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 5th - Debug View\n\n\n\n\n\n\n\n\n\nJan 5, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 6th - Steal Like an Artist\n\n\n\n\n\n\n\n\n\nJan 6, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 7th - Sample a color palette from your favorite movie/album cover\n\n\n\n\n\n\n\n\n\nJan 7, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 8th - Signed Distance Functions (Code Not Available)\n\n\n\n\n\n\n\n\n\nJan 8, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 9th - Plants\n\n\n\n\n\n\n\n\n\nJan 9, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 10th - Generative Music\n\n\n\n\n\n\n\n\n\nJan 10, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 11th - Suprematism\n\n\n\n\n\n\n\n\n\nJan 11, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 12th - Tessellation\n\n\n\n\n\n\n\n\n\nJan 12, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 13th - Something You’ve Always Wanted to Learn\n\n\n\n\n\n\n\n\n\nJan 13, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 14th - Aesemic\n\n\n\n\n\n\n\n\n\nJan 14, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 15th - Sine Waves\n\n\n\n\n\n\n\n\n\nJan 15, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 16th - Reflection of A Reflection (Code Not Available)\n\n\n\n\n\n\n\n\n\nJan 16, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 17th - A Grid Inside A Grid Inside A Grid\n\n\n\n\n\n\n\n\n\nJan 17, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 18th - Definitely Not A Grid (Code Not Available)\n\n\n\n\n\n\n\n\n\nJan 18, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 19th - Black and White\n\n\n\n\n\n\n\n\n\nJan 19, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 20th - Art Deco\n\n\n\n\n\n\n\n\n\nJan 20, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 21st - Persian Rug\n\n\n\n\n\n\n\n\n\nJan 21, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 22nd - Shadows\n\n\n\n\n\n\n\n\n\nJan 22, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 23rd - More Moiré\n\n\n\n\n\n\n\n\n\nJan 23, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 24th - Textile\n\n\n\n\n\n\n\n\n\nJan 24, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 25th - Yayoi Kusama (Code Not Available)\n\n\n\n\n\n\n\n\n\nJan 25, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 26th - My Kid Could Have Made That\n\n\n\n\n\n\n\n\n\nJan 26, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 27th - In the style of Hilma Af Klint\n\n\n\n\n\n\n\n\n\nJan 27, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 28th - Generative Poetry (Image Made with Canva)\n\n\n\n\n\n\n\n\n\nJan 28, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 29th - Maximalism\n\n\n\n\n\n\n\n\n\nJan 29, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 30th - Minimalism\n\n\n\n\n\n\n\n\n\nJan 30, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 31st - Remix one of Your Previous Works\n\n\n\n\n\n\n\n\n\nJan 31, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "year/submissions/2023/day_01.html",
    "href": "year/submissions/2023/day_01.html",
    "title": "January 1st - Perfect loop / Infinite loop / endless GIFs",
    "section": "",
    "text": "| Next: January 2nd - Made in Ten Minutes &gt;\n\n\n\n\n\n\n\n\nShow code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\n\nlibrary(dplyr) #For data wrangling/manipulation\nlibrary(purrr) #For list wrangling/manipulation/iterations\nlibrary(gganimate) #For gif creation\nlibrary(transformr) #For gif creation assistance\n\n#=============================================================================#\n#Data Set up-------------------------------------------------------------------\n#=============================================================================#\n\n#Angles for shapes#\ntheta &lt;- seq(0,2*pi, length.out = 10000)\n\n#Base level of circles to be manipulated#\ncircles &lt;- tibble(x = cos(theta) * seq(1,100, length.out = 100),\n                  y = sin(theta) * seq(1,100, length.out = 100))\n\n#Color palette to use#\ncolor_base &lt;- c(\"#af3918\", \"#a21152\", \"#822b75\",\"#612884\", \"#154baf\",\n                \"#0b82b9\",\"#277e9d\",\"#488e35\",\"#e3a934\",\"#b2336a\")\n\n#Creating indices to create the pattern of which colors will be presented in a loop#            \nindices &lt;- list(c(1:10),\n                c(2:10,1),\n                c(3:10,1:2),\n                c(4:10,1:3),\n                c(5:10,1:4),\n                c(6:10,1:5),\n                c(7:10,1:6),\n                c(8:10,1:7),\n                c(9:10,1:8),\n                c(10,1:9))\n\n\n#=============================================================================#\n#Final Data Compilation--------------------------------------------------------\n#=============================================================================#\n\ncolor_picks &lt;- map2_df(indices,1:10, ~circles |&gt;\n                        mutate(color = colorRampPalette(color_base[.x])(nrow(circles)),\n                               group = paste0(\"set_\",.y))\n                      )\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\n#!!!May take a while to build/render based on your PC stats!!!#\n\ncolor_picks %&gt;%\n  ggplot(aes(x = x*y,\n             y = x, \n             group = group))+\n  theme_void()+\n  theme(plot.background = element_rect(fill = \"black\", \n                                       linewidth = 20, \n                                       color = \"white\"))+\n  geom_path(linewidth = sample(c(1:4), nrow(color_picks), replace = TRUE),\n             position = position_jitter(width = .1), \n            color = color_picks$color)+\n  coord_polar()+\n  transition_states(\n    group,\n    transition_length = 10,\n    state_length = .1\n  ) +\n  enter_fade() + \n  exit_fade() +\n  ease_aes('bounce-in-out')\n\n#Use -&gt; anim_save(\"image destination and name here.gif\") to save output locally"
  },
  {
    "objectID": "year/submissions/2023/day_03.html",
    "href": "year/submissions/2023/day_03.html",
    "title": "January 3rd - Glitch Art",
    "section": "",
    "text": "&lt; Prev: January 2nd - Made in Ten Minutes | Next: January 4th - Intersections &gt;\n\n\n\n\n\n\n\n\nShow code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\n\nlibrary(dplyr) #For data wrangling/Manipulation\nlibrary(purrr) #For list wrangling/manipulation/iterations\nlibrary(ggplot2) #For Plotting\nlibrary(RColorBrewer) #For picking out some brewer colors\n\n#=============================================================================#\n#Data Set-up-------------------------------------------------------------------\n#=============================================================================#\n\n#Making the grid#\nsquare &lt;- tibble(x = c(0,.1,.1,0,0),\n                 y = c(0,0,.1,.1,0))\n\n#Making a single row for the grid#\nrowsq &lt;- map_df(seq(0,5, by = .1), ~square |&gt;\n                  mutate(x = x + .x))\n\n#Making the full grid#\nfull &lt;- map_df(seq(0,5, by = .1), ~rowsq |&gt;\n                 mutate(y = y + .x))\n\n#Manually calculated the groups for some reason?#\n#I don't usually do this like this but I'm too lazy to change it now#\nfull$group &lt;- rep(paste0(\"group_\",1:2601), each = 5)\n\n#Calculated/Setting some glitch colors\nglitch_colors &lt;- sample(c(\"#ff001e\", \"#f727f7\", \"#f7f727\", \"#27f727\", \"#001eff\", \"#000000\", \"#ffffff\", rep(NA, 100)), 2601, replace = TRUE)\n\n#Adding the glitch colors to the data set#\nfull$fill &lt;- rep(glitch_colors, each = 5)\n\n#Getting some gray colors for the clouds#\ngrays &lt;- brewer.pal(3, \"Greys\")\n\n#Setting the colors for the moon/planet/orb thing#\nmoon_colors &lt;- colorRampPalette(c(\"#3E497A\", \"#21325E\", \"#7858A6\", \"#548CA8\", \"#46C2CB\", \"#2D033B\"))(100)\n\n#Setting the sizes for the moon/planet/orb object#\nmoon_sizes &lt;- seq(250,20,length = 100)\n\n#Making the moon/planet/org thing#\nmoon &lt;- map2_df(moon_sizes, moon_colors, ~tibble(x = 2.5, y = 2.5) |&gt; \n                  mutate(size = .x, fill = .y )\n                )\n\n#Making the clouds#\nclouds &lt;- full |&gt; select(y) |&gt; \n  filter(y &gt; 1 & y &lt; 4) |&gt; \n  mutate(x = seq(0, 5, length = length(y)), \n         color = colorRampPalette(grays)(length(y)))|&gt; \n  slice_sample(prop = .80)\n\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\nfull |&gt;\n  ggplot()+\n  theme_void()+\n  theme(plot.background = element_rect(fill = \"#3B185F\"))+\n  geom_point(data = full, aes(x,y), \n             color = \"#1a1a1a\", \n             alpha = .2, \n             size = sample(1:15, nrow(full), replace = TRUE), \n             position = position_jitter(width = .01, height = .08))+\n  geom_point(data = full |&gt; slice_sample(n = 100), aes(x,y), \n             alpha = sample(seq(.01,.5, length.out = 100)), \n             color = \"#ffffff\", \n             position = position_jitter(width = .01, height = .02), size = .5)+\n  geom_point(data = moon, aes(x,y), \n             size = moon$size, \n             color = moon$fill, \n             position = position_jitter(width = .02, height = .04))+\n  geom_point(data = clouds, aes(x,y), \n             color = clouds$color, \n             alpha = .004, \n             size = sample(1:15, nrow(clouds), replace = TRUE), \n             position = position_jitter(width = 1, height = .8))+\n  geom_path(aes(x,y, group = group), \n            color = \"#1a1a1a\", \n            alpha = .1)+\n  geom_polygon(aes(x,y, group = group), \n               fill = full$fill, \n               alpha = sample(seq(.1,1, length = 100), nrow(full), replace = TRUE))+\n  coord_equal(xlim = c(0,5), \n              ylim = c(0,5), \n              expand = FALSE)\n\n#To save the output:\n# ggsave(\"images/03.png\",\n#        dpi = 300,\n#        device = \"png\",\n#        bg = \"transparent\",\n#        height = 10,\n#        width = 10)"
  },
  {
    "objectID": "year/submissions/2023/day_05.html",
    "href": "year/submissions/2023/day_05.html",
    "title": "January 5th - Debug View",
    "section": "",
    "text": "&lt; Prev: January 4th - Intersections | Next: January 6th - Steal Like An Artist &gt;\n\n\n\n\n\n\n\n\nShow code\n#=============================================================================#\n#Library Load-In---------------------------------------------------------------\n#=============================================================================#\n\nlibrary(dplyr) #For data wrangling\nlibrary(ggplot2) #For plotting\nlibrary(sp) #For polygon filtering\n\n#=============================================================================#\n#Data Set-up-------------------------------------------------------------------\n#=============================================================================#\n\n# Manual data for the road#\nroad &lt;- tibble(x = c(0,100,55,45,0),\n               y = c(0,0,60,60,0))\n\n# Data for the grass/ground area#\ngrass &lt;- tibble(x = c(seq(0,100, length = 200),\n                      rep(100,200),\n                      seq(100,0, length = 200),\n                      rep(0,200)),\n                y = c(rep(0,200),\n                      seq(0,60, length = 200),\n                      rep(60,200),\n                      seq(60,0, length = 200)))\n\n# Data for the stars#\nstars &lt;- tibble(expand.grid(x = seq(0,100, length = 20),\n                            y = seq(60,100, length = 10)))\n\n# Theta/Angle to create the moon#\ntheta_moon &lt;- seq(0,2*pi, length = 100)\n\n# Data for the moon#\nmoon &lt;- tibble(x = 20*cos(theta_moon)+50,\n               y = 30*sin(theta_moon)+50)\n\n# Data to add texture to the road#\nroad_texture &lt;- tibble(expand.grid(x = seq(0,100, length = 10),\n                                   y = seq(0,60, length = 10))) \n\n# Filtering out the data to only lay in our pre-made \"road\" shape#\nroad_texture &lt;- road_texture %&gt;%\n  mutate(logic = point.in.polygon(x,y,road$x,road$y))%&gt;%\n  filter(logic == 1)\n\n# Data for the \"texture\" of our ground/grass\ngrass_texture &lt;- tibble(x = rep(0,200),\n                        xend = rep(100,200),\n                        y = seq(0,60, length = 200),\n                        yend = y)\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\nstars %&gt;%\n  ggplot(aes(x,y))+\n  theme_void()+\n  theme(plot.background = element_rect(fill = \"#301934\"))+\n  geom_point(position = \"jitter\", size = .01, color = \"white\")+\n  geom_polygon(data = moon, \n               position = position_jitter(width = .3, height = .1),\n               fill = \"#FCC201\", linewidth = 1)+\n  geom_polygon(data = moon, \n               position = position_jitter(width = .3, height = .1), \n               fill = NA, \n               color = \"black\", \n               linewidth = 1)+\n  geom_polygon(data = moon, \n               position = position_jitter(width = .3, height = .1), \n               fill = NA, \n               color = \"black\", \n               linewidth = 1)+\n  geom_polygon(data = moon, \n               position = position_jitter(width = .3, height = .1), \n               fill = NA, \n               color = \"black\", \n               linewidth = 1)+\n  geom_polygon(data = grass, \n               position = position_jitter(width = .3, height = .1), \n               fill = \"#192841\", \n               color = \"black\", \n               linewidth = 1)+\n  geom_polygon(data = grass, \n               position = position_jitter(width = .3, height = .2), \n               fill = NA, \n               color = \"black\", \n               linewidth = 1)+\n  geom_polygon(data = grass, \n               position = position_jitter(width = .3, height = .3), \n               fill = NA, \n               color = \"#203354\", \n               linewidth = 1)+\n  geom_segment(data = grass_texture, aes(x=x,y=y,xend=xend,yend=yend),\n               position = position_jitter(width = 3, height = .3), \n               color = \"black\", \n               linewidth = .3, \n               inherit.aes = FALSE, \n               alpha = sample(seq(.4,1, length = 10), nrow(grass_texture), replace = TRUE))+\n  geom_polygon(data = road,  \n               fill = \"white\", \n               alpha = .8)+\n  geom_path(data = road,  \n            color = \"black\", \n            linewidth= 3)+\n  geom_line(data = road_texture, aes(group = x), \n            linewidth = 1, \n            color = \"#000000\")+\n  geom_line(data = road_texture, aes(group = y), \n            linewidth = 1, \n            color = \"#000000\")+\n  geom_line(data = road, aes(group = y), \n            linewidth = 1, \n            color = \"#000000\")+\n  geom_point(data = road, \n             size = 5, \n             color = \"#cc5500\")+\n  geom_point(data = road_texture, \n             size = 5,\n             color = \"#cc5500\")+\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100), \n                  expand = FALSE)\n\n#To save the output:\n# ggsave(\"images/05.png\",\n#        dpi = 300,\n#        device = \"png\")"
  },
  {
    "objectID": "year/submissions/2023/day_07.html",
    "href": "year/submissions/2023/day_07.html",
    "title": "January 7th - Sample a color palette from your favorite movie/album cover",
    "section": "",
    "text": "&lt; Prev: January 6th - Steal Like An Artist | Next: January 8th - Signed Distance Functions (Code Not Available)&gt;\n\n\n\n\n\n\n\n\nShow code\n#=============================================================================#\n#library Load-in---------------------------------------------------------------\n#=============================================================================#\nlibrary(dplyr) #For data wrangling/manipulation\nlibrary(purrr) #For iterations/list handling\nlibrary(ggplot2) #For Plotting\n\n#=============================================================================#\n#Data and color Set up----------------------------------------------------------\n#===========================================================================#\n\n#Colors#\nblues &lt;- c(\"#06273A\", \"#1A374D\", \"#335172\", \"#6B869B\", \"#BFCBD3\", \"#FFFFFF\")\n\nred &lt;- \"#F1371B\"\n  \n#Limit Setting#\nxmin &lt;- 0\nymin &lt;- 0\nxmax &lt;-15\nymax &lt;- 25\n\n#Specs for grid data#\n\n#Counts for the grid#\nsquare_n &lt;- 5\nn &lt;- 75\n\n#grid transformations#\nx_trans &lt;- seq(xmin,xmax, length.out = 100)\ny_trans &lt;- seq(ymin,ymax, length.out = 100)\n\n#grouping/color specs#\ngroupn_row &lt;- length(x_trans) * square_n * length(y_trans)\ncolor_n &lt;- groupn_row/5\nsquare_colors &lt;- colorRampPalette(blues)(color_n)\nborder_colors &lt;- map_chr(square_colors, ~colorRampPalette(c(.x, \"#ffffff\"))(10)[7])\n\n#Grid compilation#\nsquare &lt;- tibble(x = c(0,1,1,0,0),\n                 y = c(0,0,1,1,0))\n\nsquare_row &lt;- map_df(x_trans, ~square |&gt;\n                       mutate(x = x + .x))\n\nsquare_grid &lt;- map_df(y_trans, ~square_row |&gt;\n                        mutate(y = y + .x))\n\nsquare_grid$fill &lt;- rep(square_colors, each = 5)\nsquare_grid$color &lt;- rep(border_colors, each = 5)\nsquare_grid$group &lt;- rep(paste0(\"group\", 1:color_n), each = 5)\n\n#Polygon/building work#\nlevel1 &lt;- sample(seq(23,20, length.out = 20), n, replace = TRUE)\nlevel2 &lt;- sample(seq(20,17, length.out = 20), n, replace = TRUE)\nlevel3 &lt;- sample(seq(17,15, length.out = 20), n, replace = TRUE)\nwidths &lt;- sample(seq(3,20, length.out = 30), (n*3), replace = TRUE)\n\n#Setting up needed iteration options#\ncolors_n &lt;- rep(blues[3:1], each = n)\nlevels_n &lt;- c(level3, level2, level1)\nstarts &lt;- sample(seq(xmin, xmax, length.out = 30), (n*3), replace = TRUE)\n\nlist_opts &lt;- list(levels_n, widths, colors_n, starts)\n\n#building compilation#\nbuildings &lt;- pmap_df(list_opts, ~tibble(x = ..4,\n                                        xend = x,\n                                        y = ymax,\n                                        yend = ..1,\n                                        colors = ..3,\n                                        size = ..2))\n\n#Work for the red circle#\n\n#Setting the angles of the circles#\ntheta &lt;- seq(0, 2*pi, length.out = 50)\n\n#Creating a base unit circle#\nspiral &lt;- tibble(x = cos(theta),\n                 y = sin(theta))\n\n#compilation or the red circle#\nspiral_df &lt;- map2_df(rev(colorRampPalette(c(red, \"#ffffff\", red, \"#06273A\"))(50)), seq(0,6, length.out = 50), ~spiral |&gt;\n                       mutate(x = x*.y + 7.5,\n                              y = y * .y + 5,\n                              group = paste0(\"group\",.y),\n                              fill = .x,\n                              x = rev(x),\n                              y = rev(y)))\n\n#Texture overlay for the image#\ntexture &lt;- tibble(expand.grid(x = seq(xmin,xmax, length.out = 50),\n                           y = seq(ymin,ymax, length.out = 50)))\n\n\n\n\nbuildings |&gt;\n  ggplot(aes(x,xend = xend,y,yend = yend))+\n  theme_void()+\n  geom_polygon(data = square_grid, aes(x,y, group = group), \n               color = colorRampPalette(c(\"#ffffff\",blues[3:1]))(nrow(square_grid)), \n               fill = rev(square_grid$fill), \n               inherit.aes = FALSE,\n               linewidth = .1, \n               alpha = .2, \n               position = position_jitter(width = .1, height = .1)) +\n  geom_segment(linewidth = buildings$size,\n               color = buildings$colors)+\n  geom_polygon(data = spiral_df, aes(x,y, group = group), \n               fill = spiral_df$fill, \n               inherit.aes = FALSE, alpha = .2)+\n  geom_path(data = spiral_df, aes(x,y, group = group), \n            color = \"#000000\", \n            linewidth = .3, \n            position = position_jitter(width = .03, height = .02), \n            inherit.aes = FALSE, \n            alpha = seq(1,0, length.out = nrow(spiral_df)))+\n  geom_path(data = texture, aes(x,y), \n            inherit.aes = FALSE, \n            color = sample(blues, nrow(texture), replace = TRUE), \n            linewidth = sample(seq(0,10, length.out = 30), nrow(texture), replace = TRUE), \n            alpha = .009)+\n  geom_path(data = texture, aes(x,y), \n            inherit.aes = FALSE, \n            color = \"#ffffff\", \n            linewidth = .1, \n            alpha = .03)+\n  coord_equal(xlim = c(xmin,xmax),\n              ylim = c(ymin,ymax),\n              expand = FALSE)\n\n#To save the output:\n# ggsave(\"07.png\",\n#        dpi = 300,\n#        device = \"png\",\n#        bg = \"transparent\")"
  },
  {
    "objectID": "year/submissions/2023/day_09.html",
    "href": "year/submissions/2023/day_09.html",
    "title": "January 9th - Plants",
    "section": "",
    "text": "&lt; Prev: January 8th - Signed Distance Functions (Code Not Available) | Next: January 10th - Generative Music&gt;\n\n\n\n\n\n\n\n\nShow code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\nlibrary(dplyr) #Data wrangling\nlibrary(purrr) #list manipulation\nlibrary(ggplot2) #Plotting\nlibrary(sp) #polygon manipulation\n\n#=============================================================================#\n#Data Set up-------------------------------------------------------------------\n#=============================================================================#\n\n#Amount of grass blades desired#\nn = 150\n\n#Grass height/size#\ngrass_height = sample(seq(3,6.25, length.out = 50), n, replace = TRUE)\ngrass_level = 1\n\n#Grass \"waviness\"\nwaviness = sample(seq(5,50, length.out = 25), n, replace = TRUE)\n\n#Grass wave direction#\ndirection = c(\"left\", \"right\")\n\n#Color options#\ngrass_color = c(\"#A3CB25\", \"#CEE633\", \"#88BB1D\", \"#26610F\", \"#428115\",\"#0C3607\")\nborder_color = map_chr(grass_color, ~colorRampPalette(c(.x, \"#0C3607\"))(10)[7])\nsky_color = c(\"#003D59\", \"#167070\", \"#44857D\", \"#2BA8D4\")\n\n#X scale transformations#\nx_trans &lt;- sample(seq(1,9, length.out = 50), n, replace = TRUE)\n\n#List options for iterations#\nlist_opts &lt;- list(grass_height,\n                  grass_level,\n                  waviness,\n                  x_trans,\n                  colorRampPalette(grass_color)(n),\n                  colorRampPalette(border_color)(n),\n                  1:n)\n\n#Angle setting for circle\ntheta &lt;- seq(0,2*pi, length.out = 100)\n\n\n#=============================================================================#\n#Data Compilation--------------------------------------------------------------\n#=============================================================================#\n\n#circle data for the \"window\"\ncircle &lt;- tibble(x = (cos(theta)*4) + 5,\n                 y = (sin(theta)*4) + 5)\n\n#Grass data compilation#\ngrass &lt;- pmap_df(list_opts, ~tibble(y = c(seq(..2,..1,length.out = 1000),\n                                          seq(..1,..2, length.out = 1000),\n                                          ..2),\n                                    x = cos(y)/..3) |&gt;\n                   mutate(x = x + c(rep(0,1000),\n                                    seq(0,.5, length.out = 1000),\n                                    0),\n                          group = paste0(\"plant\",..7),\n                          fill = ..5,\n                          color = ..6,\n                          x = x + ..4)) |&gt;\n  mutate(logic = point.in.polygon(x,y, circle$x, circle$y)) |&gt;\n  filter(logic == 1)\n\n\n#Cloud Data#\ntexture &lt;- tibble(expand.grid(x = seq(0,10, length.out = 50),\n                  y = seq(0,10, length.out = 50))) |&gt;\n  mutate(logic = sp::point.in.polygon(x,y, circle$x, circle$y)) |&gt;\n  filter(logic == 1) \n\ntexture &lt;- texture |&gt;\n  arrange(y) |&gt;\n  mutate(color = colorRampPalette(c(sky_color, \"#ffffff\"))(nrow(texture)))\n\n#Background Data\nback_texture &lt;- tibble(expand.grid(x = seq(0,10, length.out = 50),\n                                y = seq(0,10, length.out = 50)))\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\ngrass |&gt;\n  ggplot(aes(x,y, group = group))+\n  theme_void()+\n  theme(plot.background = element_rect(fill = \"#751109\"))+\n  geom_path(data = back_texture, \n            aes(group = y), \n            alpha = .03,\n            position = position_jitter(width = .05, height = .04),\n            linewidth = sample(seq(1,25, length.out = nrow(back_texture))), \n            color = sample(colorRampPalette(c(\"#000000\", \"#ffffff\"))(nrow(back_texture))))+\n  geom_polygon(data = circle, aes(x,y), \n               inherit.aes = FALSE, \n               fill = sky_color[4], \n               color = \"#000000\", \n               linewidth =5)+\n  geom_point(data = texture, aes(x,y, group = x),\n             position = position_jitter(width =.05, height = .06), \n             color = texture$color, \n             inherit.aes = FALSE,  \n             size = sample(1:10, nrow(texture), replace = TRUE), \n             alpha = .04)+\n  geom_path(data = circle, aes(x,y), \n            inherit.aes = FALSE, \n            color = \"#1a1a1a\", \n            linewidth = 10)+\n  geom_polygon(fill = grass$fill, \n               color = grass$color, \n               linewidth = .4, \n               position = position_jitter(width = .003, height = .001))+\n  coord_equal(xlim = c(0,10), \n              ylim = c(0,10))\n\n#To save output:\n# ggsave(\"images/05.png\",\n#        dev = \"png\",\n#        dpi = 300,\n#        bg = \"transparent\")"
  },
  {
    "objectID": "year/submissions/2023/day_11.html",
    "href": "year/submissions/2023/day_11.html",
    "title": "January 11th - Suprematism",
    "section": "",
    "text": "&lt; Prev: January 10th - Generative Music | Next: January 12th - Tessellation&gt;\n\n\n\n\n\n\n\n\nShow code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(sp)\nlibrary(ggplot2)\n\n#=============================================================================#\n#Data Set up-------------------------------------------------------------------\n#=============================================================================#\n\n#Data for vertical lines#\nvert &lt;- tibble(x = c(seq(0,.1, length.out = 100),\n                     rep(.1, 100),\n                     seq(.1,0, length.out = 100),\n                     rep(0, 100)),\n               y = c(rep(0,100),\n                     seq(0,10, length.out = 100),\n                     rep(10, 100),\n                     seq(10,0, length.out = 100)),\n               group = rep(\"vert\", 400)\n)\n\n#Data for horizontal lines#\nhoriz &lt;- tibble(x = c(seq(0,10, length.out = 100),\n                     rep(10, 100),\n                     seq(10,0, length.out = 100),\n                     rep(0, 100)),\n               y = c(rep(0,100),\n                     seq(0,.1, length.out = 100),\n                     rep(.1, 100),\n                     seq(.1,0, length.out = 100)),\n               group = rep(\"horiz\", 400)\n)\n\n#Setting angles for circles#\ntheta &lt;- seq(0,2*pi, length.out = 100)\n\n#Creating the first circle#\ncircles &lt;- tibble(x = cos(theta) * 5,\n                  y = sin(theta) * 5)\n\n#And the second#\ncircles2 &lt;- circles |&gt;\n  mutate(x = x + 10,\n         y = y + 10)\n\n\n#Setting transformations for lines#\ntrans &lt;- seq(0,10, by = .15)\n\n#Vertical data#\nverts &lt;- map_df(trans, ~vert |&gt;\n                  mutate(x = x + .x,\n                         group = paste0(group,.x))) |&gt;\n  mutate(logic = point.in.polygon(x,y, circles$x, circles$y),\n         logic2 = point.in.polygon(x,y, circles2$x, circles2$y)) |&gt;\n  filter(logic == 0 & logic2 == 0)\n\n#Horizontal data for circle 1#\nhoriz1 &lt;- map_df(trans, ~horiz |&gt;\n                  mutate(y = y + .x,\n                         group = paste0(group,.x)))  |&gt;\n  mutate(logic = point.in.polygon(x,y, circles$x, circles$y)) |&gt;\n  filter(logic == 1)\n\n#And circle 2#\nhoriz2 &lt;- map_df(trans, ~horiz |&gt;\n                   mutate(y = y + .x,\n                          group = paste0(group,.x)))  |&gt;\n  mutate(logic = point.in.polygon(x,y, circles2$x, circles2$y)) |&gt;\n  filter(logic == 1)\n\n#Overall texture overlay#\ntexture &lt;- tibble(x = seq(0,10, length.out = 100),\n                   y = x) |&gt;\n  expand.grid()\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\nverts |&gt;\n  ggplot(aes(x,y, group = group))+\n  theme_void() +\n  theme(plot.background = element_rect(fill = \"#af3918\"))+\n  geom_path(data = texture, aes(x,y,group = x), \n            inherit.aes = FALSE, \n            linewidth = 5, \n            alpha = .05)+\n  geom_polygon(color = NA, \n               fill = \"#1a1a1a\", \n               position = position_jitter(width = .05, height = .02), \n               linewidth = .5)+\n  geom_polygon(data = horiz1, \n               fill =\"#ffffff\", \n               color = \"#1a1a1a\", \n               linewidth = .8)+\n  geom_polygon(data = horiz2, \n               fill = \"#ffffff\", \n               color = \"#1a1a1a\", \n               linewidth = 1.5)+\n  coord_equal(xlim = c(0,10),\n              ylim = c(0,10),\n              expand = FALSE)\n\n#To save output:\n# ggsave(\"11.png\",\n#        bg = \"transparent\",\n#        device = \"png\",\n#        dpi = 400)"
  },
  {
    "objectID": "year/submissions/2023/day_13.html",
    "href": "year/submissions/2023/day_13.html",
    "title": "January 13th - Something You’ve Always Wanted to Learn",
    "section": "",
    "text": "&lt; Prev: January 12th - Tessellation | Next: January 14th - Aesemic&gt;\n\n\n\n\n\n\n\n\nShow code\n#=============================================================================#\n#Library Load in---------------------------------------------------------------\n#=============================================================================#\n\nlibrary(dplyr) #Data Wrangling\nlibrary(purrr) #List wrangling/iterations\nlibrary(ggplot2) #Plotting\nlibrary(ambient) #Noise work\n\n#=============================================================================#\n#Data Set up-------------------------------------------------------------------\n#=============================================================================#\n\n#Curl creation for noise#\nupdate_curl &lt;- function(current_state, step_size = .000008, ...) {\n  curl &lt;- curl_noise(\n    x = current_state$x, \n    y = current_state$y,\n    ...\n  )\n  next_state &lt;- current_state |&gt;\n    mutate(\n      x = x + curl$x * step_size,\n      y = y + curl$y * step_size,\n      time = time + 1\n    )\n  return(next_state)\n}\n\n#Setting up the limits for the coordinates#\ncoords &lt;- seq(0, 1, length.out = 400)\n\n#Creating three passes of the noise curling#\ntime_1 &lt;- long_grid(x = coords, y = coords) |&gt; \n  mutate(id = row_number(), time = 1)\n\ntime_2 &lt;- time_1 |&gt;\n  update_curl(\n    generator = gen_simplex,\n    frequency = 10, \n    seed = 05181990\n  )\n\ntime_3 &lt;- time_2 |&gt; \n  update_curl(\n    generator = gen_simplex,\n    frequency = 10, \n    seed = 11172022\n  )\n\n#Binding into one data frame#\n\ndat123 &lt;- bind_rows(time_1,time_3,time_2)\n\n#Generating the simplex noise#\ndat123 &lt;- dat123 |&gt;\n  update_curl(\n    generator = gen_simplex,\n    frequency = 5, \n    seed = 411\n  )\n\n#Setting a color palette#\ncolorpal &lt;- c(\"#af3918\", \"#a21152\", \"#822b75\",\"#612884\",\"#154baf\",\n                       \"#0b82b9\", \"#277e9d\",\"#488e35\",\"#e3a934\",\"#b2336a\")\n                       \n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\ndat123 |&gt;\n  ggplot(aes(x, y, group = id)) + \n  theme_void() +\n  theme(plot.background = element_rect(fill = \"#000000\")) +\n  geom_path(colour = colorRampPalette(colorpal)(nrow(dat123)), linewidth = 2) +\n  coord_equal()\n\n#To save the output:\n# ggsave(\"images/13.png\",\n#        bg = \"transparent\",\n#        device = \"png\",\n#        dpi = 300)"
  },
  {
    "objectID": "year/submissions/2023/day_15.html",
    "href": "year/submissions/2023/day_15.html",
    "title": "January 15th - Sine Waves",
    "section": "",
    "text": "&lt; Prev: January 14th - Aesemic | Next: January 16th - Reflection of a Reflection (Code Not Available)&gt;\n\n\n\n\n\n\n\n\nShow code\n#=============================================================================#\n#Lbrary Load-in----------------------------------------------------------------\n#=============================================================================#\nlibrary(dplyr) #Data Wrangling\nlibrary(purrr) #List manipulation/iteration\nlibrary(ggplot2) #Plotting\n\n#=============================================================================#\n#Data Set-up-------------------------------------------------------------------\n#=============================================================================#\n\n#number of waves#\nn = 1000\n\n#Limits of the page#\nxmin &lt;- 0\nxmax &lt;- 20\n\nymin &lt;- 0\nymax &lt;- 10\n\n#Color Options#\nsky_colors &lt;- colorRampPalette(c(\"#94A4C4\", \"#98BFDE\", \"#2C8ED1\", \"#2F9DE2\", \"#2063A5\"))(n)\n\nwater_colors &lt;- colorRampPalette(c(\"#016ADF\", \"#0086E0\", \"#57E2DD\", \"#00A7B2\", \"#1095A6\", \"#016074\",\"#08389E\", \"#001247\"))(n)\n\n\n#Wave Compilation#\nwave_part &lt;- tibble(x = seq(xmin, xmax, length.out = n),\n                   y = sin(x)/10) \n\nwavex &lt;- rep_along(1:n, seq(-10,10, length.out = 100))\nwavey &lt;- seq(0,3, length.out = n)\n\nwave_opts &lt;- list(wavex,\n                  wavey,\n                  water_colors,\n                  1:n)\n#=============================================================================#\n#Data Compilation--------------------------------------------------------------\n#=============================================================================#\nwaves &lt;- pmap_df(wave_opts, ~ wave_part |&gt;\n                   mutate(x = x + jitter(..1, amount = 3),\n                          y = y + jitter(..2, amount = .2),\n                          color = ..3,\n                          group = paste0(\"wave_\",..4)))\n\n#Sky Data#\nsky_slice &lt;- tibble(x = seq(0,20, length.out = n),\n                    y = 2.5)\n\nskyy &lt;- seq(0,8.5, length.out = n)\n\nsky &lt;- map2_df(skyy, sky_colors, ~sky_slice |&gt;\n                 mutate(y = y + .x,\n                        color = .y,\n                        group = \"sky\"))\n\n#Cloud Data#\nx_end &lt;- c(5,11,20)\nybottom &lt;- c(6,6.5,7)\nytop &lt;- c(8.5,8,7.5)\n\ncloud_opts &lt;- list(x_end,ybottom,ytop)\ncloud_box &lt;- pmap_df(cloud_opts, ~tibble(x = seq(0,..1, length.out = 20),\n                                         y = seq(..2, ..3, length.out = 20),\n                                         group = \"cloud\") |&gt;\n                       expand.grid())\n\n#Colors for clouds#\ngrays &lt;- colorRampPalette(c(\"#666666\", \"#ffffff\"))(nrow(cloud_box))\n\n#Overall texture#\ntexture &lt;- tibble(x= seq(xmin,xmax, length.out = 20),\n                  y = seq(ymin,ymax, length.out = 20),\n                  group = \"texture\") |&gt;\n  expand.grid()\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\nwaves |&gt;\n  ggplot(aes(x,y, group = group))+\n  theme_void()+\n  geom_point(data = sky, \n             color = sky$color, \n             position = position_jitter(width = .4, height = .6), \n             size = sample(seq(.1,10, length.out = 25), nrow(sky), replace = TRUE))+\n  geom_path(color = waves$color, \n            linewidth = 2, \n            alpha = .8)+\n  geom_path(color = rev(waves$color), \n            linewidth = .1, \n            alpha = .2)+\n  geom_point(data = cloud_box, \n             size = sample(seq(5,10, length.out = 30), nrow(cloud_box), replace = TRUE), \n             alpha = .01, position = position_jitter(width = 5, height = .1), \n             color = sample(grays)) +\n  geom_point(data = texture, \n             size = sample(seq(10,20, length.out = 50), nrow(texture), replace = TRUE), \n             alpha = .002, color = \"#ffffff\", \n             position = position_jitter(width = .5, height = .4))+\n  coord_cartesian(xlim = c(xmin,xmax),\n                  ylim = c(ymin,ymax),\n                  expand = FALSE)\n\n#To save the output:\n# ggsave(\"images/15.png\",\n#        dev = \"png\",\n#        dpi = 300)"
  },
  {
    "objectID": "year/submissions/2023/day_17.html",
    "href": "year/submissions/2023/day_17.html",
    "title": "January 17th - A Grid Inside A Grid Inside A Grid",
    "section": "",
    "text": "&lt; Prev: January 16th - Reflection of a Reflection (Code Not Available) | Next: January 18th - Definitely Not A Grid (Code Not Available)&gt;\n\n\n\n\n\n\n\n\nShow code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\nlibrary(dplyr) #For data manipulation\nlibrary(purrr) #For list manipulation/iterations\nlibrary(ggplot2) #For Plotting\n\n#=============================================================================#\n#Data Set-up-------------------------------------------------------------------\n#=============================================================================#\n\n#Number of grids in total#\nn = 55\n\n#X scale transformations\nvar_trans &lt;- seq(0,10, length.out = n)\n\n#Compiling grids\ngrid_data &lt;- map2_df(var_trans, n, ~ tibble(x = seq(0,(.5)*..1, length.out = ..2),\n                                            y = x) |&gt; \n                       expand.grid())\n\n#Adding color palette to grid data#\ngrid_data_color &lt;- grid_data |&gt;\n  mutate(color = colorRampPalette(rev(c(\"#af3918\", \"#a21152\", \"#822b75\",\n                                        \"#612884\",\"#154baf\",\"#0b82b9\", \n                                        \"#277e9d\",\"#488e35\",\"#e3a934\",\n                                        \"#b2336a\")))(nrow(grid_data))\n                                        )\n                                             \n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\ngrid_data_color |&gt;\n  ggplot(aes(x,y))+\n  theme_void()+\n  theme(plot.background = element_rect(fill = \"black\"))+\n  geom_path(aes(group = x), \n            alpha = .3, \n            color = grid_data_color$color, \n            position = position_jitter(width = .01, height = .01))+\n  geom_path(aes(group = y), \n            alpha =.3, \n            color = grid_data_color$color, \n            position = position_jitter(width = .01, height = .01))+\n  geom_path(aes(group = x), \n            alpha = .03, \n            color = \"white\", \n            linewidth = .03)+\n  geom_path(aes(group = y), \n            alpha = .03, \n            color = \"white\", \n            linewidth = .03)+\n  coord_equal(expand = FALSE)\n\n# ggsave(\"images/17.png\",\n#        device = \"png\",\n#        dpi = 300,\n#        bg = \"transparent\")"
  },
  {
    "objectID": "year/submissions/2023/day_19.html",
    "href": "year/submissions/2023/day_19.html",
    "title": "January 19th - Black and White",
    "section": "",
    "text": "&lt; Prev: January 18th - Definitely Not A Grid (Code Not Available) | Next: January 20th - Art Deco&gt;\n\n\n\n\n\n\n\n\nShow code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\nlibrary(dplyr) #Data wrangling\nlibrary(purrr) #Iterating\nlibrary(ggplot2) #Plotting\n\n#=============================================================================#\n#Data Set-up-------------------------------------------------------------------\n#=============================================================================#\n\n#Wave data frames#\nwave1 &lt;- tibble(x = c(seq(0,100, length.out = 1000),\n                     rep(100,1000),\n                     seq(100,0, length.out = 1000),\n                     rep(0,1000)\n                     ),\n               y = c(rep(0,1000) + sin(x[1:1000])/2 * cos(x[1:1000]),\n                     seq(0,1, length.out = 1000),\n                     rep(1,1000) + sin(x[2001:3000])/2 * cos(x[2001:3000]),\n                     seq(1,0, length.out = 1000)\n                     ),\n               group = \"wave1_\"\n)\n\nwave2 &lt;- tibble(y = c(seq(0,100, length.out = 1000),\n                      rep(100,1000),\n                      seq(100,0, length.out = 1000),\n                      rep(0,1000)),\n                x = c(rep(0,1000) + sin(y[1:1000])/2 * cospi(y[1:1000]),\n                      seq(0,1, length.out = 1000),\n                      rep(1,1000) + sin(y[2001:3000])/2 * sinpi(y[2001:3000]),\n                      seq(1,0, length.out = 1000)),\n                group = \"wave2_\"\n)\n\nwave3 &lt;- tibble(x = c(seq(0,100, length.out = 1000),\n                      rep(100,1000),\n                      seq(100,0, length.out = 1000),\n                      rep(0,1000)),\n                y = c(rep(100,1000) + sin(x[1:1000])/2 * cos(x[1:1000]),\n                      seq(100,99, length.out = 1000),\n                      rep(99,1000) + sin(x[2001:3000])/2 * cos(x[2001:3000]),\n                      seq(99,100, length.out = 1000)\n                ),\n                group = \"wave3_\"\n)\n\nwave4 &lt;- tibble(y = c(seq(0,100, length.out = 1000),\n                      rep(100,1000),\n                      seq(100,0, length.out = 1000),\n                      rep(0,1000)),\n                x = c(rep(100,1000) + sin(y[1:1000])/2 * cospi(y[1:1000]),\n                      seq(100,99, length.out = 1000),\n                      rep(99,1000) + sin(y[2001:3000])/2 * sinpi(y[2001:3000]),\n                      seq(99,0, length.out = 1000)),\n                group = \"wave4_\"\n)\n\n#Function for wave manipulations#\nwave_maker &lt;- function(n, wave_df, direction = c(\"up\",\"down\",\"left\",\"right\")){\n  \n  if(direction %in% c(\"up\",\"down\")){\n    new_waves &lt;- map_df(1:n, ~ wave_df %&gt;%\n                          mutate(y = y + ifelse(direction == \"up\", 1*.x,-1*.x),\n                                 group = paste0(group,.x))\n    )\n  } else {\n    new_waves &lt;- map_df(1:n, ~ wave_df %&gt;%\n                          mutate(x = x + ifelse(direction == \"right\", 1*.x,-1*.x),\n                                 group = paste0(group,.x))\n    )\n                        }\n  \n  \n  return(new_waves)\n}\n\n#iterations#\nn1 &lt;- 25\n\n#Wave Iterations#\nwaves1 &lt;- pmap_df(list(n1,\n                       \"up\"), \n                  ~ wave_maker(..1,wave1, direction = ..2))|&gt;\n  mutate(y = y - 1)\n\n\nwaves1$fill &lt;- rep_along(1:nrow(waves1), c(rep(\"white\",4000), rep(\"black\",4000)))\n\nwaves2 &lt;- pmap_df(list(n1,\n                       \"right\"), \n                  ~ wave_maker(..1,wave2, direction = ..2)) |&gt;\n  mutate(x = x - 1)\n\nwaves2$fill &lt;- rep_along(1:nrow(waves2), c(rep(\"white\",4000), rep(\"black\",4000)))\n\nwaves3 &lt;- pmap_df(list(n1,\n                       \"down\"), \n                  ~ wave_maker(..1,wave3, direction = ..2))|&gt;\n  mutate(y = y + 1)\n\nwaves3$fill &lt;- rep_along(1:nrow(waves3), c(rep(\"white\",4000), rep(\"black\",4000)))\n\nwaves4 &lt;- pmap_df(list(n1,\n                       \"left\"), \n                  ~ wave_maker(..1,wave4, direction = ..2)) |&gt;\n  mutate(x = x + 1)\n\nwaves4$fill &lt;- rep_along(1:nrow(waves4), c(rep(\"white\",4000), rep(\"black\",4000)))\n\n#Center design#\ncenter &lt;- tibble(x = c(seq(25,75, length = 100),\n                       rep(75, 100),\n                       seq(75,25, length = 100),\n                       rep(25, 100)),\n                 y = c(rep(25,100),\n                       seq(25,75, length = 100),\n                       rep(75, 100),\n                       seq(75,25, length = 100)),\n                 group = \"center_\")\n\n#Iterations and options for center#\nn2 &lt;- 50\ntrans &lt;- seq(0,25, length.out = n2)\ncolors_box &lt;- rev(colorRampPalette(c(\"#ffffff\",\"#000000\"))(n2))\n\n#Center data frame compilation#\ncenter_data &lt;- pmap_df(list(1:n2, \n                             trans,\n                             colors_box), ~tibble(x = c(seq(25+..2,75-..2, length = 100),\n                                               rep(75-..2, 100),\n                                               seq(75-..2,25+..2, length = 100),\n                                               rep(25+..2, 100)),\n                                         y = c(rep(25+..2,100),\n                                               seq(25+..2,75-..2, length = 100),\n                                               rep(75-..2, 100),\n                                               seq(75-..2,25+..2, length = 100)),\n                                         group = paste0(\"center_\",..1),\n                                         fill = ..3)) |&gt;\n  arrange(group)\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\nwaves1 |&gt;\n  ggplot(aes(x,y, group = group))+\n  theme_void()+\n  theme(plot.background = element_rect(fill = \"#1a1a1a\"))+\n  geom_polygon(data = center_data,\n               position = position_jitter(width = .2, height = .4),\n               color = \"#1a1a1a\",\n               fill = center_data$fill,\n               alpha = .2) +\n  geom_polygon(position = position_jitter(width = .2, height = .4),\n               color = \"#1a1a1a\",\n               fill = waves1$fill) +\n  geom_polygon(data = waves2,\n               position = position_jitter(width = .2, height = .4),\n               color = \"#1a1a1a\",\n               fill = waves2$fill) +\n  geom_polygon(data = waves3,\n               position = position_jitter(width = .2, height = .4),\n               color = \"#1a1a1a\",\n               fill = waves3$fill) +\n  geom_polygon(data = waves4,\n               position = position_jitter(width = .2, height = .4),\n               color = \"#1a1a1a\",\n               fill = waves4$fill) +\n  coord_equal(xlim = c(0,100), \n              ylim = c(0,100), \n              expand = TRUE)\n\n#To save the output:\n# ggsave(\"images/19.png\",\n#        device = \"png\",\n#        dpi = 300,\n#       bg = \"transparent\")"
  },
  {
    "objectID": "year/submissions/2023/day_21.html",
    "href": "year/submissions/2023/day_21.html",
    "title": "January 21st - Persian Rug",
    "section": "",
    "text": "&lt; Prev: January 20th - Art Deco | Next: January 22th - Shadows&gt;\n\n\n\n\n\n\n\n\nShow code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(sp)\nlibrary(ggplot2)\n\n#=============================================================================#\n#Data Set-up-------------------------------------------------------------------\n#=============================================================================#\n\n#Outer Border Data#\nborder_square &lt;- tibble(x = c(0,.5,.5,0,0),\n                        y = c(0,0,.5,.5,0))\n#Scale transformations#\ny_trans &lt;- c(rep(0,20),\n             seq(.5,14.5, length = 30),\n             rep(14.5, 20),\n             seq(14.5, .5, length = 30))\n\nx_trans &lt;- c(seq(0,9.5, length = 20),\n             rep(9.5, 30),\n             seq(9.5,0, length = 20),\n             rep(0, 30))\n\n#Outer border colors#\nborder_colors &lt;- rep_along(y_trans,c(\"#301E67\",\"#13005A\"))\n\n#group IDs#\ngroup_num &lt;- 1:length(y_trans)\n\n#Iterations options for the border#\nborder_opts &lt;- list(x_trans, y_trans, border_colors, group_num)\n\n#Data border compilation#\nborder &lt;- pmap_df(border_opts, ~border_square |&gt;\n                    mutate(x = x + ..1,\n                           y = y + ..2,\n                           fill = ..3,\n                           group = paste0(\"outer_\",..4)))\n\n#Inside border data#\ninner_border &lt;- tibble(expand.grid(x = c(seq(.5,9.5, length = 200),\n                             rep(9.5,200),\n                             seq(9.5, .5, length = 200),\n                             rep(.5, 200)),\n                       y = c(rep(.5,200),\n                             seq(.5,14.5, length = 200),\n                             rep(14.5, 200),\n                             seq(14.5, .5, length = 200)),\n                       group = \"inner\")) \n\n#center data#\ncenter &lt;- tibble(expand.grid(x = c(seq(1,9, length = 200),\n                                   rep(9,200),\n                                   seq(9, 1, length = 200),\n                                   rep(1, 200)),\n                             y = c(rep(1,200),\n                                   seq(1,14, length = 200),\n                                   rep(14, 200),\n                                   seq(14, 1, length = 200)),\n                             group = \"innercenter\")) \n\n#diamond data#\ndiamond_inner &lt;-  tibble(x = c(5,7.5,5,2.5,5),\n                         y = c(2.5,7.5,12.5,7.5,2.5),\n                         group = \"diamond\")\n\ndiamond_outer &lt;- tibble(x = c(5,8,5,2,5),\n                        y = c(2,7.5,13,7.5,2),\n                        group = \"diamond2\")\n\n#Overall texture#\ntexture &lt;- tibble(x = seq(0,10, length = 200),\n                  y = seq(0,15, lengt= 200)) |&gt;\n  expand.grid()\n\n#Diamond texture\ndiamond_texture &lt;- texture |&gt;\n  mutate(logic = point.in.polygon(x,y,diamond_inner$x, diamond_inner$y),\n         group = \"diamond\") |&gt;\n  filter(logic == 1)\n  \n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\nborder |&gt;\n  ggplot(aes(x,y, group = group))+\n  theme_void()+\n  geom_polygon(fill = border$fill)+\n  geom_point(data = inner_border, fill = \"#1a1a1a\")+\n  geom_path(data = inner_border, \n            position = position_jitter(width = .03, height = .05), \n            linewidth = .1, \n            color = \"#333333\", \n            alpha = .4)+\n  geom_point(data = center, \n             fill = \"#13005A\", \n             size = .5)+\n  geom_path(data = center, \n            position = position_jitter(width = .03, height = .05), \n            linewidth = .1, \n            color = \"#301E67\", \n            alpha = .4)+\n  geom_polygon(data = diamond_inner, \n               fill = \"#e8a71c\")+\n  geom_path(data = diamond_texture, aes(group = y),  \n            linewidth = 1, \n            color = sample(colorRampPalette(c(\"#c99f42\",\"gold\"))(nrow(diamond_texture))))+\n  geom_path(data = diamond_outer, \n            linewidth = 2, \n            color = \"#e8a71c\")+\n  geom_path(data = texture, aes(sample(x),sample(y)), \n            inherit.aes = FALSE, \n            alpha = .002, \n            color = \"#ffffff\", \n            linewidth = sample(seq(.1,.4, length = nrow(texture))))+\n  coord_equal(xlim = c(0,10),\n              ylim = c(0,15), \n              expand = FALSE)\n\n# ggsave(\"images/21.png\",\n#        device = \"png\",\n#        dpi = 300,\n#        bg = \"transparent\")"
  },
  {
    "objectID": "year/submissions/2023/day_23.html",
    "href": "year/submissions/2023/day_23.html",
    "title": "January 23rd - More Moiré",
    "section": "",
    "text": "&lt; Prev: January 22nd - Shadows | Next: January 24th - Textile&gt;\n\n\n\n\n\n\n\n\nShow code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\nlibrary(dplyr) #data wrangling\nlibrary(purrr) #iteration assist\nlibrary(ggplot2) #plotting\nlibrary(sp) #polygon manipulation\n\n#=============================================================================#\n#Data Set-up-------------------------------------------------------------------\n#=============================================================================#\n\n#Base square data#\nsquare &lt;- tibble(x = c(0,1,1,0,0),\n                 y = c(0,0,1,1,0))\n\n#Number of iterations#\nn &lt;- 15\n\n#scale transfromations#\nscaler &lt;- seq(0,3, length = n)\npositioner &lt;- rev(scaler)\n\n#Iteration options#\nsquare_opts &lt;- list(scaler, positioner, 1:n)\n\n#Square data (One of them)\nsquare_df &lt;- pmap_df(square_opts, ~square |&gt;\n                       mutate(x = (x * ..1) + ..2,\n                              y = (y * ..1) + ..2,\n                              group = paste0(\"group\",..3)))\n\n#Rotation fx#\nshape_rotator &lt;- function(df, angle = 5){\n  \n  mp = list(\"x\" = (min(df$x)+max(df$x))/2,\n            \"y\" = (min(df$y)+max(df$y))/2)\n  \n  rotated_shape &lt;- df %&gt;%\n    mutate(x2 = (x - mp$x)*cos(angle) - (y - mp$y)*sin(angle) + mp$x, \n           y2 = (x - mp$x)*sin(angle) + (y - mp$y)*cos(angle) + mp$y,\n           x = x2,\n           y = y2) %&gt;%\n    select(-c(x2,y2))\n  \n  rotated_shape\n  \n}\n\n#Number of angles to sample#\nanglesn &lt;- 20\n\n#sampled angles#\nangles &lt;- sample(1:360, anglesn, replace = TRUE)\n\n#scale transfomer#\ntrans &lt;- seq(0,10, by = 4)\n\n#iteration helper#\nnlength &lt;- 1:length(trans)\n\n#Final square data compilation#\nsquare_df2 &lt;- map2_df(trans, nlength, ~map2_df(trans, nlength, ~map2_df(anglesn, angles, ~shape_rotator(square_df, angle = .y) |&gt;\n                        mutate(group = paste0(group,.x))) |&gt;\n                        mutate(group = paste0(group,\"-row\",.y),\n                               x = x + .x)) |&gt; \n                        mutate(group = paste0(group,\"-col\",.y),\n                               y = y + .x))\n\n#Donut data compilation#\ncenter &lt;- tibble(x = (cos(seq(0,2*pi, length = 10000)) * 5) + mean(square_df2$x),\n                 y = (sin(seq(0,2*pi, length = 10000)) * 5) +  mean(square_df2$y),\n                 group = \"circle\")\n\nmini_center &lt;- tibble(x = (cos(seq(0,2*pi, length = 10000)) * 3) + mean(square_df2$x),\n                      y = (sin(seq(0,2*pi, length = 10000)) * 3) +  mean(square_df2$y),\n                      group = \"mini circle\")\n\n#Final datafram to account for the donut#\nfinal_df &lt;- square_df2 |&gt;\n  mutate(logic = point.in.polygon(x,y,center$x, center$y),\n         color = if_else(logic == 1, \"#000000\", \"#1295a3\"),\n         logic = point.in.polygon(x,y,mini_center$x, mini_center$y),\n         color = if_else(logic == 1, \"#1295a3\", color))\n\n#Background data for patterns#\nbackground &lt;- tibble(x = seq(round(min(final_df$x)), round(max(final_df$x)), length.out = 100),\n                     xend = x,\n                     y = round(min(final_df$y)),\n                     yend = round(max(final_df$y)))\n  \n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n  \nfinal_df |&gt;\n  ggplot(aes(x,y, group = group))+\n  theme_void()+\n  theme(plot.background = element_rect(fill = \"#000000\"))+\n  geom_segment(data = background, aes(x,y,xend = xend, yend = yend), \n               inherit.aes = FALSE, \n               linetype = (sample(1:3, nrow(background), replace = TRUE)), \n               color = \"#ffffff\", \n               alpha = .4)+\n  geom_polygon(data = center, \n               fill = \"#1295a3\", \n               position = position_jitter(width = .05, height = .03))+\n  geom_polygon(data = mini_center, \n               fill = \"#000000\", \n               position = position_jitter(width = .05, height = .03))+\n  geom_path(linewidth = .1, \n            color = final_df$color)+\n  coord_equal()"
  },
  {
    "objectID": "year/submissions/2023/day_25.html",
    "href": "year/submissions/2023/day_25.html",
    "title": "January 25th - Yayoi Kusama (Code Not Available)",
    "section": "",
    "text": "&lt; Prev: January 24th - Textile | Next: January 26th - My Kid Could Have Made That&gt;\n\n\n\n\n\n\nCode Not Available/Ready for Open Source"
  },
  {
    "objectID": "year/submissions/2023/day_27.html",
    "href": "year/submissions/2023/day_27.html",
    "title": "January 27th - In the style of Hilma Af Klint",
    "section": "",
    "text": "&lt; Prev: January 26th - My Kid Could Have Made That | Next: January 28th - Generative Poetry(Made in Canva)&gt;\n\n\n\n\n\n\n\n\nShow code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\nlibrary(dplyr) #Data wrangling\nlibrary(purrr) #Iterations\nlibrary(sp) #Polygon filtering\nlibrary(ggplot2) #Plotting\n\n#=============================================================================#\n#Data Set-up-------------------------------------------------------------------\n#=============================================================================#\n\n#Background COlor#\nbackground &lt;- \"#F7F5EB\"\n  \n#Overall texture data#\ntexture &lt;- tibble(x = seq(0,10, length = 100),\n                  y = seq(0,15, length = 100)) |&gt;\n  expand.grid()\n\n#Angles to be used for all circles#\ntheta &lt;- seq(0,2*pi, length = 100)\n\n#Main red circle#\nmain_piece &lt;- tibble(x = (cos(theta) * 4) + 5,\n                     y = (sin(theta) * 4) + 7.5,\n                     group = \"circle\",\n                     fill = \"#B23A28\")\n\n#Circle hell to account for texture jitter#\nmain_piece_text_shell &lt;- tibble(x = (cos(theta) * 3.5) + 5,\n                                y = (sin(theta) * 3.5) + 7.5)\n\n#Texture for main circle#\nmain_texture &lt;- texture |&gt;\n  mutate(x = jitter(x, amount = .4),\n         y = jitter(y, amount = .4),\n         logic = point.in.polygon(x,y, main_piece_text_shell$x, main_piece_text_shell$y)) |&gt;\n  filter(logic == 1)\n\n#Main triangle#\ntri_main &lt;- tibble(x = c(2.5,7.5,5,2.5),\n                   y = c(5.5,5.5,10.5,5.5)) \n\n#Triangle texture#\ntri_texture &lt;- texture |&gt;\n  mutate(x = jitter(x, amount = .4),\n         y = jitter(y, amount = .4),\n         logic = sp::point.in.polygon(x,y, tri_main$x, tri_main$y)) |&gt;\n  filter(logic == 1)\n\n#Right circle data#\nright_circle &lt;- tibble(x = (cos(theta) * 4) + 10,\n                       y = (sin(theta) * 4),\n                       group = \"circle\",\n                       fill = \"#32498D\")\n\n#Left circle data#\nleft_circle &lt;- tibble(x = (cos(theta) * 4),\n                      y = (sin(theta) * 4 + 15),\n                      group = \"circle\",\n                      fill = \"#D5BD5D\")\n\n#Shells and textures for the side circles#\nleft_shell &lt;- tibble(x = (cos(theta) * 3.5),\n                     y = (sin(theta) * 3.5 + 15))\n\nleft_texture &lt;- texture |&gt;\n  mutate(x = jitter(x, amount = .4),\n         y = jitter(y, amount = .4),\n         logic = sp::point.in.polygon(x,y, left_shell$x, left_shell$y)) |&gt;\n  filter(logic == 1)\n\nright_shell &lt;- tibble(x = (cos(theta) * 3.5 + 10),\n                      y = (sin(theta) * 3.5))\n\nright_texture &lt;- texture |&gt;\n  mutate(x = jitter(x, amount = .4),\n         y = jitter(y, amount = .4),\n         logic = sp::point.in.polygon(x,y, right_shell$x, right_shell$y)) |&gt;\n  filter(logic == 1)\n\n# Smaller circle settings#\nradis &lt;- c(.8,.5,.4,.8,.5,.4)\nborders &lt;- radis + .1\nxs &lt;- c(5,3,1,5,7,9)\nys &lt;- c(rep(2,3), rep(13,3))\ncolors_circles &lt;- colorRampPalette(c(\"#32498D\", \"#D5BD5D\"))(6)\n\ncircle_opts &lt;- list(radis,\n                    borders,\n                    xs,\n                    ys,\n                    colors_circles)\n\n#smaller circle data compilation#\nblue_circles &lt;- pmap_df(circle_opts, ~tibble(x = (cos(theta)*..1) + ..3,\n                                             y = (sin(theta)*..1) + ..4,\n                                             fill = ..5,\n                                             group = paste0(\"group_\",..5)))\n\n#smaller circle border data compilation#\nborder_circles &lt;- pmap_df(circle_opts, ~tibble(x = (cos(theta)*..2) + ..3,\n                                               y = (sin(theta)*..2) + ..4,\n                                               color = \"#ffffff\",\n                                               group = paste0(\"group_\",..5,\"circle\")))\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\ntexture |&gt;\n  ggplot(aes(x,y))+\n  theme_void()+\n  theme(plot.background = element_rect(fill = background))+\n  geom_point(color = sample(colorRampPalette(c(\"#EAE0DA\",\"#B7B78A\",\"#F7F5EB\"))(10),nrow(texture), replace = TRUE),\n             position = position_jitter(width = .6, height = .5),\n             size = sample(seq(25,45, length = nrow(texture))),\n             alpha = .05)+\n  geom_polygon(data = blue_circles, aes(sample(x), sort(y), group = group), \n               fill = NA, color = \"white\", \n               linetype = 3, \n               linewidth = .1, \n               alpha = .3)+\n  geom_polygon(data = main_piece, aes(group = group), \n               fill = main_piece$fill)+\n  geom_point(data = main_texture,\n             color = sample(colorRampPalette(c(\"#B23A28\",\"#5C1F15\",\"#BF5836\"))(10),nrow(main_texture), replace = TRUE),\n             size = sample(seq(2,15, length = nrow(main_texture))),\n             alpha = .01)+\n  geom_polygon(data = tri_main, \n               fill = \"#000000\", \n               color = \"#000000\", \n               linewidth = 5, \n               linejoin = \"mitre\")+\n  geom_path(data = tri_texture, aes(x,sort(y)), \n            color = \"#ffffff\", \n            alpha = .7, \n            linewidth = .1)+\n  geom_polygon(data = right_circle, aes(group = group), \n               fill = right_circle$fill)+\n  geom_polygon(data = left_circle, aes(group = group), \n               fill = left_circle$fill)+\n  geom_point(data = left_texture,\n             color = sample(colorRampPalette(c(\"#D5BD5D\",\"#649D7A\",\"#377B70\", \"#32498D\"))(10),nrow(left_texture), replace = TRUE),\n             size = sample(seq(2,15, length = nrow(left_texture))),\n             alpha = .01)+\n  geom_point(data = right_texture,\n             color = sample(colorRampPalette(rev(c(\"#D5BD5D\",\"#649D7A\",\"#377B70\", \"#32498D\")))(10),nrow(right_texture), replace = TRUE),\n             size = sample(seq(2,15, length = nrow(right_texture))),\n             alpha = .01)+\n  geom_polygon(data = blue_circles, aes(group = group), \n               fill = blue_circles$fill)+\n  geom_path(data = border_circles, aes(group = group), \n            color = border_circles$color)+\n  coord_equal(expand = FALSE, \n              xlim = c(0,10), \n              ylim = c(0,15))\n\n#To save the output:\n# ggsave(\"images/27.png\",\n#        device = \"png\",\n#        dpi = 300,\n#        bg = \"transparent\")"
  },
  {
    "objectID": "year/submissions/2023/day_29.html",
    "href": "year/submissions/2023/day_29.html",
    "title": "January 29th - Maximalism",
    "section": "",
    "text": "&lt; Prev: January 28th - Generative Poetry (Made in Canva) | Next: January 30th - Minimalism&gt;\n\n\n\n\n\n\n\n\nShow code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\nlibrary(dplyr) #For Data Wrangling\nlibrary(purrr) #For iterations\nlibrary(ggplot2) #For Plotting\n\n#Angle setting for the curves#\ntheta &lt;- seq(0,-pi, length = 1000)\n\n#Number of \"fingers\"#\nn &lt;- 50\n\n#Page limits#\nxmin &lt;- 0\nxmax &lt;- 10\nymin &lt;- 0\nymax &lt;- 10\n\n#Starting points for the \"fingers\"#\ny_starts &lt;- sample(seq(ymax - 3, ymax, length = n))\nx_starts &lt;- sample(seq(xmin, xmax, length = n))\n\n#Color for the \"fingers\"#\nfills &lt;- sort(colorRampPalette(c(\"#af3918\", \"#a21152\", \"#822b75\",\"#612884\",\"#154baf\",\n                                 \"#0b82b9\", \"#277e9d\",\"#488e35\",\"#e3a934\",\"#b2336a\"))(n))\n                                     \n#finger options for iterations#\ndrip_opts &lt;- list(1:n,\n                  y_starts,\n                  x_starts,\n                  fills)\n\n#Jitter precision setting#\njit_n &lt;- .03\n\n#Finger data from the top-down#\ndrip &lt;- pmap_df(drip_opts, ~tibble(x = c(..3,\n                                         jitter(rep(..3,1000), amount = jit_n),\n                                         jitter(cos(theta)/2 + ..3 - .5, amount = jit_n),\n                                         jitter(rep(..3 - 1, 1000), amount = jit_n),\n                                         ..3,\n                                         ..3 + .1,\n                                         jitter(rep(..3 ,1000), amount = jit_n) + .1,\n                                         jitter(cos(theta)/2 + ..3 - .5, amount = jit_n) + .1,\n                                         jitter(rep(..3 - 1, 1000), amount = jit_n) + .1,\n                                         ..3 + .1),\n                                   y = c(ymax,\n                                         jitter(seq(ymax,..2, length = 1000), amount = jit_n),\n                                         jitter(sin(theta) + ..2, amount = jit_n),\n                                         jitter(seq(..2,ymax, length = 1000), amount = jit_n),\n                                         ymax,\n                                         ymax - .02,\n                                         jitter(seq(ymax,..2, length = 1000), amount = jit_n) - .02,\n                                         jitter(sin(theta) + ..2, amount = jit_n) - .02,\n                                         jitter(seq(..2,ymax, length = 1000), amount = jit_n) - .02,\n                                         ymax - .02),\n                                   \n                                   group = c(rep(paste0(\"drip_\",..1),3002),\n                                             rep(paste0(\"dripshadow_\",..1),3002)),\n                                   \n                                   fill = c(rep(..4,3002),\n                                            rep(\"#1a1a1a\",3002)))\n)\n\n# Bottom Row Data - repeat of above but reversed for bottom-up#\ny_starts2 &lt;- sample(seq(ymin + 3, ymin, length = n))\nx_starts2 &lt;- sample(seq(xmin, xmax, length = n))\n\nfills2 &lt;- colorRampPalette(c(\"#af3918\", \"#a21152\", \"#822b75\",\"#612884\",\"#154baf\",\n                                          \"#0b82b9\", \"#277e9d\",\"#488e35\",\"#e3a934\",\"#b2336a\"))(n)\n\ndrip2_opts &lt;- list(1:n,\n                   y_starts2,\n                   x_starts2,\n                   fills2)\n\ntheta2 &lt;- seq(0,pi, length = 1000)\n\ndrip_below &lt;- pmap_df(drip2_opts, ~tibble(x = c(..3,\n                                         jitter(rep(..3,1000), amount = jit_n),\n                                         jitter(cos(theta2)/2 + ..3 - .5, amount = jit_n),\n                                         jitter(rep(..3 - 1, 1000), amount = jit_n),\n                                         ..3,\n                                         ..3 + .1,\n                                         jitter(rep(..3 ,1000), amount = jit_n) + .1,\n                                         jitter(cos(theta2)/2 + ..3 - .5, amount = jit_n) + .1,\n                                         jitter(rep(..3 - 1, 1000), amount = jit_n) + .1,\n                                         ..3 + .1),\n                                   y = c(ymin,\n                                         jitter(seq(ymin,..2, length = 1000), amount = jit_n),\n                                         jitter(sin(theta2) + ..2, amount = jit_n),\n                                         jitter(seq(..2,ymin, length = 1000), amount = jit_n),\n                                         ymin,\n                                         ymin + .02,\n                                         jitter(seq(ymin,..2, length = 1000), amount = jit_n) + .02,\n                                         jitter(sin(theta2) + ..2, amount = jit_n) - .02,\n                                         jitter(seq(..2,ymin, length = 1000), amount = jit_n) + .02,\n                                         ymin + .02),\n                                   \n                                   group = c(rep(paste0(\"drip_\",..1),3002),\n                                             rep(paste0(\"dripshadow_\",..1),3002)),\n                                   \n                                   fill = c(rep(..4,3002),\n                                            rep(\"#1a1a1a\",3002)))\n)\n\n#Polka dot data#\npolka &lt;- tibble(x = seq(xmin,xmax, by = .2),\n                y = seq(ymin,ymax, by = .2)) |&gt;\n  expand.grid() |&gt;\n  mutate(logic = row_number(),\n         logic = logic %% 2 != 0) |&gt;\n  filter(logic)\n\n#Overall texture data#\ntexture_top &lt;- tibble(x = seq(xmin,xmax, by = .1),\n                      y = seq(ymin,ymax, by = .1)) |&gt;\n  expand.grid() |&gt;\n  mutate(logic = row_number(),\n         logic = logic %% 2 != 0) |&gt;\n  filter(logic) |&gt;\n  mutate(logic = sp::point.in.polygon(x,y, drip$x, drip$y)) |&gt;\n  filter(logic == 1)\n\n#Data for background gradient#\nsquare &lt;- tibble(x = c(0,.5,\n                       rep(.5,1000),\n                       rep(0,1000)),\n                 y = c(0,0,\n                       seq(0,10, length = 1000),\n                       seq(10,0, length = 1000)))\n\nx_trans &lt;- seq(xmin,xmax, by = .5)\ny_trans &lt;- seq(ymin,ymax, by = .5)\nn_grid &lt;- 1:(length(x_trans))\nrect_opts &lt;- list(x_trans,\n                  colorRampPalette(c(\"#000000\",\"#ffffff\"))(length(x_trans)),\n                  n_grid)\n\n#background gradient data#  \ngrid_texture &lt;- pmap_df(rect_opts, ~square |&gt;\n                       mutate(x = x + ..1,\n                              group = ..3,\n                              fill = ..2))\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\ndrip |&gt; \n  ggplot(aes(x,y, group = rev(group)))+\n  theme_void()+\n  theme(plot.background = element_rect(fill = \"white\"))+\n  geom_polygon(data = grid_texture, \n               fill = grid_texture$fill, \n               color = rev(grid_texture$fill), \n               linewidth = .1, \n               position = position_jitter(width = .05, height = .2))+\n  geom_point(data = polka, aes(x,y), \n             inherit.aes = FALSE, \n             color = \"black\", \n             size = 2, \n             shape = 21, \n             stroke = 2,\n             fill = sample(colorRampPalette(c(\"#af3918\", \"#a21152\", \"#822b75\",\"#612884\",\"#154baf\",\n                                              \"#0b82b9\", \"#277e9d\",\"#488e35\",\"#e3a934\",\"#b2336a\"))(nrow(polka))))+\n  geom_polygon(fill = drip$fill, \n               color = \"#1a1a1a\")+\n  geom_polygon(data = drip_below, \n               fill = drip_below$fill, \n               color = \"#1a1a1a\")+\n  coord_cartesian(xlim = c(xmin, xmax),\n                  ylim = c(ymin, ymax),\n                  expand = FALSE)\n\n#To save the output:\n# ggsave(\"images/29.png\",\n#        dpi = 300,\n#        device = \"png\")"
  },
  {
    "objectID": "year/submissions/2023/day_31.html",
    "href": "year/submissions/2023/day_31.html",
    "title": "January 31st - Remix one of Your Previous Works",
    "section": "",
    "text": "&lt; Prev: January 30th - Minimalism |\n\n\n\n\n\n\n\n\nShow code\n#=============================================================================#\n#Library Load-in---------------------------------------------------------------\n#=============================================================================#\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(ggplot2)\n\n#=============================================================================#\n#Data Set-up-------------------------------------------------------------------\n#=============================================================================#\n\n#Sky (Nebula) data#\nsky &lt;- tibble(x = seq(0,10, length = 100),\n              y = seq(0,10, length = 100)) |&gt;\n  expand.grid() \n\n#Setting a color palette for the sky in the background===\nsky_pal &lt;- sample(colorRampPalette(c(rep(\"#000000\",3),rep(\"#1A0539\",5), \"#c66c92\",\"#836193\",\"#434a73\",\"#439895\",\"#046c8e\",rep(\"#042047\",3)))(nrow(sky)))\nsky_size &lt;- sample(15:35, nrow(sky), replace = TRUE)\n\nsky_texture &lt;- sky |&gt;\n  mutate(color = sky_pal,\n         size = sky_size,\n         group = \"sky\")\n\n\n#====Stars Data====\nstars_grid &lt;- tibble(expand.grid(x = seq(0,10, length.out = 100),\n                                 y = seq(0,10, length.out = 100))) \n\nstars &lt;- slice_sample(stars_grid, n = 200) |&gt;\n  mutate(group = \"stars\")\n\n\n#====Mountains Data/Functions/Palettes====\n\n# Function that creates one set of mountains====\n#THIS IS AN OLD FX I'M NOT MAKING THIS MORE EFFICIENT IDC I'M TIRED 🗣 \nmountain_ranger &lt;- function(base,height,rows){\n  \n  #Creating the first foundation the function will build off of==\n  foundation &lt;- tibble(x = c(0, base, seq(base,0, length.out = 20)),\n                 y = c(0, 0, height, height+sample(seq(-.2,.8,length.out = 100),18, replace = TRUE), 0))\n  \n  #Creating an empty list to store the data for the generated mountain ranges==\n  mountains &lt;- list()\n  \n  #Using a for-loop to iterate through the data to create the correct number of rows/ranges we want==\n  for(i in seq_along(1:rows)){\n    mountains[[i]] &lt;- foundation %&gt;%\n      mutate(y = abs(y + c(0, 0, i*(sample(seq(-.8,.8,length.out = 100), nrow(foundation) - 3)), 0)),\n             group = i)\n  }\n  \n  #Adding the \"group\" variable to our original foundation that was created earlier==\n  foundation &lt;- foundation %&gt;%\n    mutate(group = 0)\n  \n  #Binding the generated mountain data together==\n  mountains &lt;- bind_rows(mountains)\n  \n  #Binding the generated mountain data and the foundation data together into one data frame==\n  range &lt;- rbind(foundation,mountains)\n  \n  #Returning the data frame to the environment==\n  return(range)\n}\n\n#Using the custom function to make two sets of ranges===\nrange &lt;- mountain_ranger(6,5,3)\nrange2 &lt;- mountain_ranger(10,1.8,3)\n\n#Calculating the total amount of ROWS located within EACH group in each set of ranges==\ngroup_n &lt;- nrow(range)/length(unique(range$group))\ngroup_n2 &lt;- nrow(range2)/length(unique(range2$group))\n\n#Calculating the TOTAL number of GROUPS within each set of ranges==\ngroup_total &lt;- length(unique(range$group))\ngroup_total2 &lt;- length(unique(range2$group))\n\n# Colors for the first range data set==\nmountain_pal_range &lt;- sort(rep(sample(c(\"#011d26\",\"#02303f\",\"#1c5a73\",\"#4a748c\",\"#1A0539\",\"#836193\"),group_total, \n                                 replace = TRUE), each = group_n))\n\n# Colors for the second range data set==\nmountain_pal_range2 &lt;- sort(rep(sample(c(\"#011d26\",\"#02303f\",\"#1c5a73\",\"#4a748c\",\"#836193\",rep(\"#1A0539\",4)),group_total2, \n                                  replace = TRUE), each = group_n2))\n\n\n#====Trees Data/Functions/Palettes====\n#Creating tree options#\nx_trans &lt;- seq(0,9.9, by = .1)\ny_trans &lt;- sample(seq(-.8,.5, length = 30), length(x_trans), replace = TRUE)\ntree_pal &lt;- sample(colorRampPalette(c(\"#224b39\", \"#3D6E38\", \"#082922\"))(length(x_trans)))\n\ntree_opts &lt;- list(x_trans, y_trans, tree_pal)\n\n#Creating tree data#\ntrees &lt;- pmap_df(tree_opts, ~tibble(x = c(0,.1,\n                                          rep(.1,100),\n                                          .1,0,\n                                          rep(0,100)),\n                                    y = c(0,0,\n                                          seq(0,1.5 + ..2, length = 100),\n                                          1.5 + ..2, 1.5 + ..2,\n                                          seq(1.5 + ..2,0, length = 100)),\n                                    group = \"tree_\") |&gt;\n                   mutate(x = x + ..1,\n                          group = paste0(group,..1),\n                          fill = ..3))\n\n#====Frame Data====\n# Just our x and y limits#\nframe &lt;- tibble(x = c(0,10,10,0,0),\n                y = c(0,0,10,10,0),\n                group = \"frame\")\n\n#=============================================================================#\n#Final Piece-------------------------------------------------------------------\n#=============================================================================#\n\nsky_texture  %&gt;%\n  ggplot(aes(x=x,y=y, group = group)) +\n  theme_void()+\n  theme(panel.background = element_rect(fill = \"#000000\"))+\n  geom_point(color = sky_texture$color,\n             size = sky_texture$size,\n             alpha = .02) +\n  geom_point(data = stars, \n             color = \"#ffffff\",\n             position = position_jitter(width =.05, height = .03), \n             alpha = sample(seq(.2,.9, length.out = 1000),nrow(stars), replace = TRUE),\n             size = sample(seq(.02,.2, length.out = 1000),nrow(stars), replace = TRUE))+\n  geom_polygon(data = range, \n               fill = mountain_pal_range,\n               color = \"#011D26\", \n               linewidth =.56,\n               alpha = .9, \n               position = position_jitter(width = .1)) +\n  geom_polygon(data = range2, \n               fill = rev(mountain_pal_range2),\n               color = \"#011D26\", \n               linewidth =.5,\n               alpha = .9, \n               position = position_jitter(width = .1)) +\n  geom_polygon(data = range2, aes(y = y - .4),\n               fill = \"#836193\",\n               color = \"#011D26\", \n               linewidth =.5,\n               alpha = .5, \n               position = position_jitter(width = .1)) +\n  geom_polygon(data = trees, \n               color = \"#082922\", \n               linewidth = .1, \n               fill = trees$fill,\n               position = position_jitter(width = .03))+\n  geom_path(data = frame, \n            color = \"#000000\", \n            linewidth = 10, \n            position = position_jitter(width = .1, height = .1))+\n  coord_cartesian(xlim = c(0,10), ylim = c(0,10), clip = \"on\",expand = FALSE)"
  }
]